(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{477:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"英文原文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#英文原文"}},[t._v("#")]),t._v(" 英文原文")]),t._v(" "),a("div",[a("p",[t._v("Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.")]),t._v(" "),a("p",[t._v("You may assume no duplicates in the array.")]),t._v(" "),a("p",[a("strong",[t._v("Example 1:")])]),t._v(" "),a("pre",[a("strong",[t._v("Input:")]),t._v(" [1,3,5,6], 5\n"),a("strong",[t._v("Output:")]),t._v(" 2\n")]),t._v(" "),a("p",[a("strong",[t._v("Example 2:")])]),t._v(" "),a("pre",[a("strong",[t._v("Input:")]),t._v(" [1,3,5,6], 2\n"),a("strong",[t._v("Output:")]),t._v(" 1\n")]),t._v(" "),a("p",[a("strong",[t._v("Example 3:")])]),t._v(" "),a("pre",[a("strong",[t._v("Input:")]),t._v(" [1,3,5,6], 7\n"),a("strong",[t._v("Output:")]),t._v(" 4\n")]),t._v(" "),a("p",[a("strong",[t._v("Example 4:")])]),t._v(" "),a("pre",[a("strong",[t._v("Input:")]),t._v(" [1,3,5,6], 0\n"),a("strong",[t._v("Output:")]),t._v(" 0\n")])]),t._v(" "),a("h2",{attrs:{id:"中文翻译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中文翻译"}},[t._v("#")]),t._v(" 中文翻译")]),t._v(" "),a("div",[a("p",[t._v("给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。")]),t._v(" "),a("p",[t._v("你可以假设数组中无重复元素。")]),t._v(" "),a("p",[a("strong",[t._v("示例 1:")])]),t._v(" "),a("pre",[a("strong",[t._v("输入:")]),t._v(" [1,3,5,6], 5\n"),a("strong",[t._v("输出:")]),t._v(" 2\n")]),t._v(" "),a("p",[a("strong",[t._v("示例 2:")])]),t._v(" "),a("pre",[a("strong",[t._v("输入:")]),t._v(" [1,3,5,6], 2\n"),a("strong",[t._v("输出:")]),t._v(" 1\n")]),t._v(" "),a("p",[a("strong",[t._v("示例 3:")])]),t._v(" "),a("pre",[a("strong",[t._v("输入:")]),t._v(" [1,3,5,6], 7\n"),a("strong",[t._v("输出:")]),t._v(" 4\n")]),t._v(" "),a("p",[a("strong",[t._v("示例 4:")])]),t._v(" "),a("pre",[a("strong",[t._v("输入:")]),t._v(" [1,3,5,6], 0\n"),a("strong",[t._v("输出:")]),t._v(" 0\n")])]),t._v(" "),a("h2",{attrs:{id:"通过代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过代码"}},[t._v("#")]),t._v(" 通过代码")]),t._v(" "),a("RecoDemo",[a("template",{slot:"code-Java-1"},[a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("searchInsert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])])])],2),t._v(" "),a("h2",{attrs:{id:"高赞题解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高赞题解"}},[t._v("#")]),t._v(" 高赞题解")]),t._v(" "),a("p",[t._v("下面的动画以 "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-search/submissions/",target:"_blank",rel:"noopener noreferrer"}},[t._v("「力扣」第 704 题：二分查找"),a("OutboundLink")],1),t._v(" 为例，展示了使用这个模板编写二分查找法的一般流程。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/8ca5cc946a9e7e158f36928a31697cd4151ee80c1dd0f57e92cafda3065c8640-binary-search-template-new.gif",alt:"binary-search-template-new.gif"}})]),t._v(" "),a("p",[t._v("以下“演示文稿”展示了本文所要讲解的主要内容，您可以只看这部分的内容，如果您还想看得更仔细一点，可以查看“演示文稿”之后的原文。")]),t._v(" "),a("h2",{attrs:{id:"《十分好用的二分查找法模板》演示文稿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#《十分好用的二分查找法模板》演示文稿"}},[t._v("#")]),t._v(" 《十分好用的二分查找法模板》演示文稿")]),t._v(" "),a("p",[t._v("（温馨提示：下面的幻灯片建议您点击右下角的前进 “▶|” 或者后退 “|◀” 按钮以控制播放。）")]),t._v(" "),a("p",[t._v("<"),a("img",{attrs:{src:"https://pic.leetcode-cn.com/973e619c1d451696323359db0a60136a785df01f101e1eb62638dffc24484c1b-binary-search-template-1.png",alt:"binary-search-template-1.png"}}),t._v(","),a("img",{attrs:{src:"https://pic.leetcode-cn.com/bb27e74a3bd8db79afc116fb9d868cc767398cd2e221cba1de2138cc20f50dba-binary-search-template-2.png",alt:"binary-search-template-2.png"}}),t._v(","),a("img",{attrs:{src:"https://pic.leetcode-cn.com/397d3c79e3460a72155f1fc4bfa88eba658c7fdaf8bc989cd72ed1fe94265035-binary-search-template-3.png",alt:"binary-search-template-3.png"}}),t._v(","),a("img",{attrs:{src:"https://pic.leetcode-cn.com/fbfd8f8bb5036e2e8b2145e1cf6dc658fd4ee75c7b9e15b7c1d7b7c26ce28a3f-binary-search-template-4.png",alt:"binary-search-template-4.png"}}),t._v(","),a("img",{attrs:{src:"https://pic.leetcode-cn.com/90ad70e1208a6b00ddd0949186ebb8f2ac8e66a9d76aedc5f939e7fe3e3cd30d-binary-search-template-5.png",alt:"binary-search-template-5.png"}}),t._v(","),a("img",{attrs:{src:"https://pic.leetcode-cn.com/5a7d57c7c6a21af358560eb9b63401312e0ba309ef33d5127dd4df0f9cc0e090-binary-search-template-6.png",alt:"binary-search-template-6.png"}}),t._v(","),a("img",{attrs:{src:"https://pic.leetcode-cn.com/a63ebbdaa85dc9a0cac768d9e1dbefbf63693d9640223a82dd8bbb7643fd41f7-binary-search-template-7.png",alt:"binary-search-template-7.png"}}),t._v(","),a("img",{attrs:{src:"https://pic.leetcode-cn.com/7dc47ddfe37bba38b4c902d41fc74fb55463013c8ee2fdc3bdcaa384c529517c-binary-search-template-8.png",alt:"binary-search-template-8.png"}}),t._v(","),a("img",{attrs:{src:"https://pic.leetcode-cn.com/1e6b743ae18d81dc359a419dfe9db794f085794b7f448850dbab291de2f0f3f1-binary-search-template-9.png",alt:"binary-search-template-9.png"}}),t._v(","),a("img",{attrs:{src:"https://pic.leetcode-cn.com/28e55d9c76842b4adb78f11c91edebc4b936a40e9f95defbe317d15275d51fc9-binary-search-template-10.png",alt:"binary-search-template-10.png"}}),t._v(","),a("img",{attrs:{src:"https://pic.leetcode-cn.com/a2bf1422fa396ff76dd3909ec48813491baa770cb1a8506d9a4fc46b62160f6f-binary-search-template-11.png",alt:"binary-search-template-11.png"}}),t._v(","),a("img",{attrs:{src:"https://pic.leetcode-cn.com/dfcc195bbadc192d5de79a0ee99c5f722e28cf1f345df5799a67535f397544e2-binary-search-template-12.png",alt:"binary-search-template-12.png"}}),t._v(","),a("img",{attrs:{src:"https://pic.leetcode-cn.com/1180339af6eac72e4e95b8c25a16dc23e6d4c4873271d97afc6e074be2cac9b8-binary-search-template-13.png",alt:"binary-search-template-13.png"}}),t._v(","),a("img",{attrs:{src:"https://pic.leetcode-cn.com/ebf8a53a89943cb43a55b1bd0d01aa1491960e5c6691d45dc00f2536bb73d929-binary-search-template-14.png",alt:"binary-search-template-14.png"}}),t._v(">")]),t._v(" "),a("p",[t._v("（上面的“演示文稿”是对以下文字的概括。）")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"_1、导读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、导读"}},[t._v("#")]),t._v(" 1、导读")]),t._v(" "),a("p",[t._v("本文介绍了我这半年以来，在刷题过程中使用“二分查找法”刷题的一个模板，包括这个模板的优点、使用技巧、注意事项、调试方法等。虽说是模板，但我不打算一开始就贴出代码，因为这个模板根本没有必要记忆，只要你能够理解文中叙述的知识点和注意事项，并加以应用（刷题），相信你会和我一样喜欢这个模板，并且认为使用它是自然而然的事情。")]),t._v(" "),a("p",[t._v("这个模板应该能够帮助你解决 LeetCode 带“二分查找”标签的"),a("a",{attrs:{href:"https://leetcode-cn.com/tag/binary-search/",target:"_blank",rel:"noopener noreferrer"}},[t._v("常见问题"),a("OutboundLink")],1),t._v("（简单、中等难度）。只要你能够理解文中叙述的知识点和注意事项，并加以应用（其实就是多刷题），相信你会和我一样喜欢这个模板，并且认为使用它是自然而然的事情。")]),t._v(" "),a("h3",{attrs:{id:"_2、历史上有关“二分查找法”的故事"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、历史上有关“二分查找法”的故事"}},[t._v("#")]),t._v(" 2、历史上有关“二分查找法”的故事")]),t._v(" "),a("p",[t._v("二分查找法虽然简单，但写好它并没有那么容易。我们可以看看一些名人关于二分查找法的论述。")]),t._v(" "),a("ul",[a("li",[t._v("算法和程序设计技术的先驱 "),a("a",{attrs:{href:"https://www.wikiwand.com/en/Donald_Knuth",target:"_blank",rel:"noopener noreferrer"}},[t._v("Donald Ervin Knuth（中文名：高德纳）"),a("OutboundLink")],1),t._v("：")])]),t._v(" "),a("blockquote",[a("p",[t._v("Although the basic idea of binary search is comparatively straightforward, the details can be surprisingly tricky ...")])]),t._v(" "),a("p",[t._v("译：“虽然二分查找的基本思想相对简单，但细节可能会非常棘手”。来自维基百科 "),a("a",{attrs:{href:"https://www.wikiwand.com/en/Binary_search_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Binary_search_algorithm"),a("OutboundLink")],1),t._v("，请原谅本人可能非常不优雅的中文翻译。")]),t._v(" "),a("ul",[a("li",[t._v("同样是高德纳先生，在其著作《计算机程序设计的艺术 第 3 卷：排序和查找》中指出：")])]),t._v(" "),a("blockquote",[a("p",[t._v("二分查找法的思想在 1946 年就被提出来了。但是第 1 个没有 Bug 的二分查找法在 1962 年才出现。")])]),t._v(" "),a("p",[t._v("（因时间和个人能力的关系，我没有办法提供英文原文，如果能找到英文原文的朋友欢迎提供一下出处，在此先谢过。）")]),t._v(" "),a("p",[t._v("据说这个 Bug 在 Java 的 JDK 中都隐藏了将近 10 年以后，才被人们发现并修复。")]),t._v(" "),a("ul",[a("li",[t._v("《编程珠玑》的作者 Jon Bentley：")])]),t._v(" "),a("blockquote",[a("p",[t._v("When Jon Bentley assigned binary search as a problem in a course for professional programmers, he found that ninety percent failed to provide a correct solution after several hours of working on it, mainly because the incorrect implementations failed to run or returned a wrong answer in rare edge cases.")])]),t._v(" "),a("p",[t._v("译：当 JonBentley 把二分查找作为专业程序员课程中的一个问题时，他发现百分之九十的人在花了几个小时的时间研究之后，没有提供正确的解决方案，主要是因为错误的实现无法正确运行（笔者注：可能返回错误的结果，或者出现死循环），或者是不能很好地判断边界条件。")]),t._v(" "),a("h3",{attrs:{id:"_3、“传统的”二分查找法模板的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、“传统的”二分查找法模板的问题"}},[t._v("#")]),t._v(" 3、“传统的”二分查找法模板的问题")]),t._v(" "),a("h4",{attrs:{id:"（1）取中位数索引的代码有问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（1）取中位数索引的代码有问题"}},[t._v("#")]),t._v(" （1）取中位数索引的代码有问题")]),t._v(" "),a("div",{staticClass:"language-Java [] line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这行代码是有问题的，在 "),a("code",[t._v("left")]),t._v(" 和 "),a("code",[t._v("right")]),t._v(" 都比较大的时候，"),a("code",[t._v("left + right")]),t._v(" 很有可能超过 int 类型能表示的最大值，即整型溢出，为了避免这个问题，应该写成：")]),t._v(" "),a("div",{staticClass:"language-Java [] line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("事实上，"),a("code",[t._v("int mid = left + (right - left) / 2")]),t._v("  在 "),a("code",[t._v("right")]),t._v(" 很大、 "),a("code",[t._v("left")]),t._v(" 是负数且很小的时候， "),a("code",[t._v("right - left")]),t._v(" 也有可能超过 "),a("code",[t._v("int")]),t._v(" 类型能表示的最大值，只不过一般情况下 "),a("code",[t._v("left")]),t._v(" 和 "),a("code",[t._v("right")]),t._v(" 表示的是数组索引值，"),a("code",[t._v("left")]),t._v(" 是非负数，因此  "),a("code",[t._v("right - left")]),t._v("  溢出的可能性很小。")]),t._v(" "),a("p",[t._v("更好的写法是：")]),t._v(" "),a("div",{staticClass:"language-Java [] line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("原因在后文介绍，请读者留意：")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("使用“左边界索引 + 右边界索引”，然后“无符号右移 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("1")])])])]),t._v(" 位”是推荐的写法。")])])]),t._v(" "),a("h4",{attrs:{id:"（2）循环可以进行的条件写成-while-left-right-时，在退出循环的时候，需要考虑返回-left-还是-right，稍不注意，就容易出错"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（2）循环可以进行的条件写成-while-left-right-时，在退出循环的时候，需要考虑返回-left-还是-right，稍不注意，就容易出错"}},[t._v("#")]),t._v(" （2）循环可以进行的条件写成 "),a("code",[t._v("while (left <= right)")]),t._v(" 时，在退出循环的时候，需要考虑返回 "),a("code",[t._v("left")]),t._v(" 还是 "),a("code",[t._v("right")]),t._v("，稍不注意，就容易出错")]),t._v(" "),a("p",[t._v("以本题（LeetCode 第 35 题：搜索插入位置）为例。")]),t._v(" "),a("p",[t._v("分析：根据题意并结合题目给出的 4 个示例，不难分析出这个问题的等价表述如下：")]),t._v(" "),a("blockquote",[a("p",[t._v("1、如果目标值（严格）大于排序数组的最后一个数，返回这个排序数组的长度，否则进入第 2 点。")]),t._v(" "),a("p",[t._v("2、返回排序数组从左到右，大于或者等于目标值的第 1 个数的"),a("strong",[t._v("索引")]),t._v("。")])]),t._v(" "),a("p",[t._v("事实上，当给出数组中有很多数和目标值相等的时候，我们返回任意一个与之相等的数的索引值都可以，不过为了简单起见，也为了方便后面的说明，我们返回第 1 个符合题意的数的索引。")]),t._v(" "),a("p",[t._v("题目告诉你“排序数组”，其实就是在"),a("strong",[t._v("疯狂暗示你用二分查找法")]),t._v("。 二分查找法的思想并不难，但写好一个二分法并不简单，下面就借着这道题为大家做一个总结。")]),t._v(" "),a("p",[t._v("刚接触二分查找法的时候，我们可能会像下面这样写代码，我把这种写法容易出错的地方写在了注释里：")]),t._v(" "),a("p",[a("strong",[t._v("参考代码")]),t._v("：针对本题（LeetCode 第 35 题）")]),t._v(" "),a("div",{staticClass:"language-Java [] line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("searchInsert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等于的情况最简单，我们应该放在第 1 个分支进行判断")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 题目要我们返回大于或者等于目标值的第 1 个数的索引")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时 mid 一定不是所求的左边界，")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时左边界更新为 mid + 1")]),t._v("\n                left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 既然不会等于，此时 nums[mid] > target")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mid 也一定不是所求的右边界")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时右边界更新为 mid - 1")]),t._v("\n                right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意：一定得返回左边界 left，")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果返回右边界 right 提交代码不会通过")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 【注意】下面我尝试说明一下理由，如果你不太理解下面我说的，那是我表达的问题")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但我建议你不要纠结这个问题，因为我将要介绍的二分查找法模板，可以避免对返回 left 和 right 的讨论")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 理由是对于 [1,3,5,6]，target = 2，返回大于等于 target 的第 1 个数的索引，此时应该返回 1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在上面的 while (left <= right) 退出循环以后，right < left，right = 0 ，left = 1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据题意应该返回 left，")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果题目要求你返回小于等于 target 的所有数里最大的那个索引值，应该返回 right")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br")])]),a("p",[a("strong",[t._v("说明")]),t._v("：")]),t._v(" "),a("p",[t._v("1、当把二分查找法的循环可以进行的条件写成 "),a("code",[t._v("while (left <= right)")]),t._v(" 时，在写最后一句 "),a("code",[t._v("return")]),t._v(" 的时候，如果不假思索，把左边界 "),a("code",[t._v("left")]),t._v(" 返回回去，虽然写对了，但可以思考一下为什么不返回右边界 "),a("code",[t._v("right")]),t._v(" 呢？")]),t._v(" "),a("p",[t._v("2、但是事实上，返回 "),a("code",[t._v("left")]),t._v(" 是有一定道理的，如果题目换一种问法，你可能就要返回右边界 "),a("code",[t._v("right")]),t._v("，这句话不太理解没有关系，我也不打算讲得很清楚（在上面代码的注释中我已经解释了原因），因为实在太绕了，这不是我要说的重点。")]),t._v(" "),a("p",[t._v("由此，我认为“传统二分查找法模板”使用的痛点在于：")]),t._v(" "),a("blockquote",[a("p",[t._v("传统二分查找法模板，当退出 "),a("code",[t._v("while")]),t._v(" 循环的时候，在返回左边界还是右边界这个问题上，比较容易出错。")])]),t._v(" "),a("p",[t._v("那么，是不是可以回避这个问题呢？答案是肯定的，答案就在下面我要介绍的“神奇的”二分查找法模板里。")]),t._v(" "),a("h3",{attrs:{id:"_4、“神奇的”二分查找法模板的基本思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、“神奇的”二分查找法模板的基本思想"}},[t._v("#")]),t._v(" 4、“神奇的”二分查找法模板的基本思想")]),t._v(" "),a("h4",{attrs:{id:"（1）首先把循环可以进行的条件写成-while-left-right-，在退出循环的时候，一定有-left-right-成立，此时返回-left-或者-right-都可以"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（1）首先把循环可以进行的条件写成-while-left-right-，在退出循环的时候，一定有-left-right-成立，此时返回-left-或者-right-都可以"}},[t._v("#")]),t._v(" （1）首先把循环可以进行的条件写成 "),a("code",[t._v("while(left < right)")]),t._v("，在退出循环的时候，一定有 "),a("code",[t._v("left == right")]),t._v(" 成立，此时返回 "),a("code",[t._v("left")]),t._v(" 或者 "),a("code",[t._v("right")]),t._v(" 都可以")]),t._v(" "),a("p",[t._v("或许你会问：退出循环的时候还有一个数没有看啊（退出循环之前索引 left 或 索引 right 上的值）？\n没有关系，我们就等到退出循环以后来看，甚至经过分析，有时都不用看，就能确定它是目标数值。")]),t._v(" "),a("p",[t._v("（什么时候需要看最后剩下的那个数，什么时候不需要，会在第 5 点介绍。）")]),t._v(" "),a("p",[t._v("更深层次的思想是“夹逼法”或者称为“排除法”。")]),t._v(" "),a("h4",{attrs:{id:"（2）“神奇的”二分查找法模板的基本思想（特别重要）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（2）“神奇的”二分查找法模板的基本思想（特别重要）"}},[t._v("#")]),t._v(" （2）“神奇的”二分查找法模板的基本思想（特别重要）")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("“排除法”即：在每一轮循环中排除一半以上的元素，于是在对数级别的时间复杂度内，就可以把区间“夹逼” 只剩下 1 个数，而这个数是不是我们要找的数，单独做一次判断就可以了。")])])]),t._v(" "),a("p",[t._v("“夹逼法”或者“排除法”是二分查找算法的基本思想，“二分”是手段，在目标元素不确定的情况下，“二分” 也是“最大熵原理”告诉我们的选择。")]),t._v(" "),a("p",[t._v("还是 LeetCode 第 35 题，下面给出使用 "),a("code",[t._v("while (left < right)")]),t._v(" 模板写法的 2 段参考代码，以下代码的细节部分在后文中会讲到，因此一些地方不太明白没有关系，暂时跳过即可。")]),t._v(" "),a("p",[a("strong",[t._v("参考代码 1")]),t._v("：重点理解为什么候选区间的索引范围是 "),a("code",[t._v("[0, size]")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-Python [] line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" typing "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" List\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("searchInsert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回大于等于 target 的索引，有可能是最后一个")]),t._v("\n        size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 特判")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n        left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果 target 比 nums里所有的数都大，则最后一个数的索引 + 1 就是候选值，因此，右边界应该是数组的长度")]),t._v("\n        right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" size\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 二分的逻辑一定要写对，否则会出现死循环或者数组下标越界")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" target\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1,5,7] 2")]),t._v("\n                right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 调试语句")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print('left = {}, right = {}, mid = {}'.format(left, right, mid))")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" left\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br")])]),a("div",{staticClass:"language-Java [] line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("searchInsert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br")])]),a("p",[a("strong",[t._v("参考代码 2")]),t._v("：对于是否接在原有序数组后面单独判断，不满足的时候，再在候选区间的索引范围 "),a("code",[t._v("[0, size - 1]")]),t._v(" 内使用二分查找法进行搜索。")]),t._v(" "),a("div",{staticClass:"language-Python [] line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" typing "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" List\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("searchInsert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回大于等于 target 的索引，有可能是最后一个")]),t._v("\n        size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 特判 1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 特判 2：如果比最后一个数字还要大，直接接在它后面就可以了")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" size\n\n        left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 二分的逻辑一定要写对，否则会出现死循环或者数组下标越界")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" target\n                right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" left\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br")])]),a("div",{staticClass:"language-Java [] line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只会把比自己大的覆盖成小的")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二分法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果有一连串数跟 target 相同，则返回索引最靠前的")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 特例： 3 5 5 5 5 5 5 5 5 5")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 特例： 3 6 7 8")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// System.out.println("尝试过的值：" + mid);')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 2 3 5 5 5 5 5 5 6 ，target = 5")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 2 3 3 5 5 5 6 target = 4")]),t._v("\n\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("searchInsert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// nums[mid] 的值可以舍弃")]),t._v("\n                left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// nums[mid] 不能舍弃")]),t._v("\n                right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution2")]),t._v(" solution2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" searchInsert "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" solution2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("searchInsert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("searchInsert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br")])]),a("h3",{attrs:{id:"_5、细节、注意事项、调试方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、细节、注意事项、调试方法"}},[t._v("#")]),t._v(" 5、细节、注意事项、调试方法")]),t._v(" "),a("h4",{attrs:{id:"（1）前提：思考左、右边界，如果左、右边界不包括目标数值，会导致错误结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（1）前提：思考左、右边界，如果左、右边界不包括目标数值，会导致错误结果"}},[t._v("#")]),t._v(" （1）前提：思考左、右边界，如果左、右边界不包括目标数值，会导致错误结果")]),t._v(" "),a("p",[t._v("例：LeetCode 第 69 题：x 的平方根")]),t._v(" "),a("blockquote",[a("p",[t._v("实现 "),a("code",[t._v("int sqrt(int x)")]),t._v(" 函数。")]),t._v(" "),a("p",[t._v("计算并返回 x 的平方根，其中 x 是非负整数。")]),t._v(" "),a("p",[t._v("由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。")])]),t._v(" "),a("p",[t._v("分析：一个非负整数的平方根最小可能是 0 ，最大可能是它自己。\n因此左边界可以取 0 ，右边界可以取 x。\n可以分析得再细一点，但这道题没有必要，因为二分查找法会帮你排除掉不符合的区间元素。")]),t._v(" "),a("p",[t._v("例：LeetCode 第 287 题：寻找重复数")]),t._v(" "),a("blockquote",[a("p",[t._v("给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。")])]),t._v(" "),a("p",[t._v("分析：题目告诉我们“其数字都在 1 到 n 之间（包括 1 和 n）”。因此左边界可以取 1 ，右边界可以取 n。")]),t._v(" "),a("p",[a("strong",[t._v("要注意 2 点")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果 "),a("code",[t._v("left")]),t._v(" 和 "),a("code",[t._v("right")]),t._v(" 表示的是数组的索引，就要考虑“索引是否有效” ，即“索引是否越界” 是重要的定界依据；")])]),t._v(" "),a("li",[a("p",[t._v("左右边界一定要包括目标元素，例如 LeetCode 第 35 题：“搜索插入位置” ，当 "),a("code",[t._v("target")]),t._v(" 比数组中的最后一个数字还要大（不能等于）的时候，插入元素的位置就是数组的最后一个位置 + 1，即 "),a("code",[t._v("(len - 1 + 1 =) len")]),t._v("，如果忽略掉这一点，把右边界定为 "),a("code",[t._v("len - 1")]),t._v(" ，代码就不能通过在线测评。")])])]),t._v(" "),a("h4",{attrs:{id:"（2）中位数先写-int-mid-left-right-1-根据循环里分支的编写情况，再做调整"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（2）中位数先写-int-mid-left-right-1-根据循环里分支的编写情况，再做调整"}},[t._v("#")]),t._v(" （2）中位数先写 "),a("code",[t._v("int mid = (left + right) >>> 1 ;")]),t._v(" 根据循环里分支的编写情况，再做调整")]),t._v(" "),a("p",[t._v("理解这一点，首先要知道：当数组的元素个数是偶数的时候，中位数有左中位数和右中位数之分。")]),t._v(" "),a("ul",[a("li",[t._v("当数组的元素个数是偶数的时候：")])]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("int mid = left + (right - left) / 2 ;")]),t._v("  得到左中位数的索引；")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("int mid = left + (right - left + 1) / 2 ;")]),t._v("  得到右中位数的索引。")]),t._v(" "),a("ul",[a("li",[t._v("当数组的元素个数是奇数的时候，以上二者都能选到最中间的那个中位数。")])]),t._v(" "),a("p",[t._v("其次，")]),t._v(" "),a("p",[a("code",[t._v("int mid = left + (right - left) / 2 ;")]),t._v(" 等价于 "),a("code",[t._v("int mid = (left + right) >>> 1")]),t._v("；")]),t._v(" "),a("p",[a("code",[t._v("int mid = left + (right - left + 1) / 2 ;")]),t._v(" 等价于 "),a("code",[t._v("int mid = (left + right + 1) >>> 1")]),t._v(" 。")]),t._v(" "),a("p",[t._v("我们使用一个具体的例子来验证：当左边界索引 "),a("code",[t._v("left = 3")]),t._v("，右边界索引 "),a("code",[t._v("right = 4")]),t._v(" 的时候，")]),t._v(" "),a("p",[a("code",[t._v("mid1 = left + (right - left) // 2 = 3 + (4 - 3) // 2 = 3 + 0 = 3")]),t._v("，")]),t._v(" "),a("p",[a("code",[t._v("mid2 = left + (right - left + 1) // 2 = 3 + (4 - 3 + 1) // 2 = 3 + 1 = 4")]),t._v("。")]),t._v(" "),a("p",[t._v("左中位数 "),a("code",[t._v("mid1")]),t._v(" 是索引 "),a("code",[t._v("left")]),t._v("，右中位数 "),a("code",[t._v("mid2")]),t._v(" 是索引 "),a("code",[t._v("right")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("记忆方法")]),t._v("：")]),t._v(" "),a("blockquote",[a("p",[a("strong",[a("code",[t._v("(right - left)")]),t._v(" 不加 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("1")])])])]),t._v(" 选左中位数，加 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("1")])])])]),t._v(" 选右中位数")]),t._v("。")])]),t._v(" "),a("p",[t._v("那么，什么时候使用左中位数，什么时候使用右中位数呢？选中位数的依据是为了避免死循环，得根据分支的逻辑来选择中位数，而分支逻辑的编写也有技巧，下面具体说。")]),t._v(" "),a("h4",{attrs:{id:"（3）先写逻辑上容易想到的分支逻辑，这个分支逻辑通常是排除中位数的逻辑；"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（3）先写逻辑上容易想到的分支逻辑，这个分支逻辑通常是排除中位数的逻辑；"}},[t._v("#")]),t._v(" （3）先写逻辑上容易想到的分支逻辑，这个分支逻辑通常是排除中位数的逻辑；")]),t._v(" "),a("p",[t._v("在逻辑上，“可能是也有可能不是”让我们感到犹豫不定，但**“一定不是”是我们非常坚决的，通常考虑的因素特别单一，因此“好想” **。在生活中，我们经常听到这样的话：找对象时，“有车、有房，可以考虑，但没有一定不要”；找工作时，“事儿少、离家近可以考虑，但是钱少一定不去”，就是这种思想的体现。")]),t._v(" "),a("p",[t._v("例：LeetCode 第 69 题：x 的平方根")]),t._v(" "),a("blockquote",[a("p",[t._v("实现 "),a("code",[t._v("int sqrt(int x)")]),t._v(" 函数。")]),t._v(" "),a("p",[t._v("计算并返回 x 的平方根，其中 x 是非负整数。")]),t._v(" "),a("p",[t._v("由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。")])]),t._v(" "),a("p",[t._v("分析：因为题目中说“返回类型是整数，结果只保留整数的部分，小数部分将被舍去”。例如 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("5")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("5")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("5")])])])]),t._v(" 的平方根约等于 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("2.236")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2.236")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("2")]),a("span",{staticClass:"mord"},[t._v(".")]),a("span",{staticClass:"mord"},[t._v("2")]),a("span",{staticClass:"mord"},[t._v("3")]),a("span",{staticClass:"mord"},[t._v("6")])])])]),t._v("，在这道题应该返回 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("2")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("2")])])])]),t._v("。因此如果一个数的平方小于或者等于 x，那么这个数有可能是也有可能不是 x 的平方根，但是能很肯定的是，如果一个数的平方大于 x ，这个数肯定不是 x 的平方根。")]),t._v(" "),a("p",[t._v("注意：先写“好想”的分支，排除了中位数之后，通常另一个分支就不排除中位数，而不必具体考虑另一个分支的逻辑的具体意义，且代码几乎是固定的。")]),t._v(" "),a("h4",{attrs:{id:"（4）循环内只写两个分支，一个分支排除中位数，另一个分支不排除中位数，循环中不单独对中位数作判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（4）循环内只写两个分支，一个分支排除中位数，另一个分支不排除中位数，循环中不单独对中位数作判断"}},[t._v("#")]),t._v(" （4）循环内只写两个分支，一个分支排除中位数，另一个分支不排除中位数，循环中不单独对中位数作判断")]),t._v(" "),a("p",[t._v("既然是“夹逼”法，没有必要在每一轮循环开始前单独判断当前中位数是否是目标元素，因此分支数少了一支，代码执行效率更高。")]),t._v(" "),a("p",[t._v("以下是“排除中位数的逻辑”思考清楚以后，可能出现的两个模板代码。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/39522acc27327aa7e69b29252fb4e77d2e53cd817cfabb885913cd0ccade370d-image.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("可以排除“中位数”的逻辑，通常比较好想，但并不绝对，这一点视情况而定。")]),t._v(" "),a("p",[t._v("分支条数变成 2 条，比原来 3 个分支要考虑的情况少，好处是：")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("不用在每次循环开始单独考虑中位数是否是目标元素，节约了时间")]),t._v("，我们只要在退出循环的时候，即左右区间压缩成一个数（索引）的时候，去判断这个索引表示的数是否是目标元素，而不必在二分的逻辑中单独做判断。")])]),t._v(" "),a("p",[t._v("这一点很重要，希望读者结合具体练习仔细体会，"),a("strong",[t._v("每次循环开始的时候都单独做一次判断，在统计意义上看，二分时候的中位数恰好是目标元素的概率并不高，并且即使要这么做，也不是普适性的，不能解决绝大部分的问题")]),t._v("。")]),t._v(" "),a("p",[t._v("还以 LeetCode 第 35 题为例，通过之前的分析，我们需要找到“大于或者等于目标值的第 1 个数的"),a("strong",[t._v("索引")]),t._v("”。对于这道题而言：")]),t._v(" "),a("p",[t._v("（1）如果中位数小于目标值，它就应该被排除，左边界 "),a("code",[t._v("left")]),t._v(" 就至少是 "),a("code",[t._v("mid + 1")]),t._v("；")]),t._v(" "),a("p",[t._v("（2）如果中位数大于等于目标值，还不能够肯定它就是我们要找的数，因为要找的是等于目标值的第 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("1")])])])]),t._v(" 个数的"),a("strong",[t._v("索引")]),t._v("，"),a("strong",[t._v("中位数以及中位数的左边都有可能是符合题意的数")]),t._v("，因此右边界就不能把 "),a("code",[t._v("mid")]),t._v(" 排除，因此右边界 "),a("code",[t._v("right")]),t._v(" 至多是 "),a("code",[t._v("mid")]),t._v("，此时右边界不向左边收缩。")]),t._v(" "),a("p",[a("strong",[t._v("下一点就更关键了")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"（5）根据分支逻辑选择中位数的类型，可能是左中位数，也可能是右位数，选择的标准是避免死循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（5）根据分支逻辑选择中位数的类型，可能是左中位数，也可能是右位数，选择的标准是避免死循环"}},[t._v("#")]),t._v(" （5）根据分支逻辑选择中位数的类型，可能是左中位数，也可能是右位数，选择的标准是避免死循环")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/4f735d3ea9826097b96e53f4c6cc63f5d4e6341d3fd85ef6aa161a72971ee0bf-image.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("死循环容易发生在区间只有 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("2")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("2")])])])]),t._v(" 个元素时候，此时中位数的选择尤为关键。"),a("strong",[t._v("选择中位数的依据是")]),t._v("：避免出现死循环。我们需要确保：")]),t._v(" "),a("p",[t._v("（下面的这两条规则说起来很绕，可以暂时跳过）。")]),t._v(" "),a("blockquote",[a("p",[t._v("1、如果分支的逻辑，在选择左边界的时候，不能排除中位数，那么中位数就选“右中位数”，只有这样区间才会收缩，否则进入死循环；")]),t._v(" "),a("p",[t._v("2、同理，如果分支的逻辑，在选择右边界的时候，不能排除中位数，那么中位数就选“左中位数”，只有这样区间才会收缩，否则进入死循环。")])]),t._v(" "),a("p",[t._v("理解上面的这个规则可以通过具体的例子。针对以上规则的第 1 点：如果分支的逻辑，在选择左边界的时候不能排除中位数，例如：")]),t._v(" "),a("p",[t._v("Python 伪代码：")]),t._v(" "),a("div",{staticClass:"language-Python [] line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不妨先写左中位数，看看你的分支会不会让你代码出现死循环，从而调整")]),t._v("\n    mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 业务逻辑代码")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("check"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 选择右边界的时候，可以排除中位数")]),t._v("\n        right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 选择左边界的时候，不能排除中位数")]),t._v("\n        left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("ul",[a("li",[a("strong",[t._v("在区间中的元素只剩下 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("2")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("2")])])])]),t._v(" 个时候")]),t._v("，例如："),a("code",[t._v("left = 3")]),t._v("，"),a("code",[t._v("right = 4")]),t._v("。此时"),a("strong",[t._v("左中位数就是左边界")]),t._v("，如果你的逻辑执行到 "),a("code",[t._v("left = mid")]),t._v(" 这个分支，"),a("strong",[t._v("且你选择的中位数是左中位数，此时左边界就不会得到更新，区间就不会再收缩（理解这句话是关键），从而进入死循环")]),t._v("；")]),t._v(" "),a("li",[t._v("为了避免出现死循环，你需要选择中位数是右中位数，当逻辑执行到 "),a("code",[t._v("left = mid")]),t._v(" 这个分支的时候，因为你选择了右中位数，让逻辑可以转而执行到 "),a("code",[t._v("right = mid - 1")]),t._v(" 让区间收缩，最终成为 1 个数，退出 "),a("code",[t._v("while")]),t._v(" 循环。")])]),t._v(" "),a("p",[t._v("上面这段话不理解没有关系，因为我还没有举例子，你有个印象就好，类似地，理解选择中位数的依据的第 2 点。")]),t._v(" "),a("h4",{attrs:{id:"（6）退出循环的时候，可能需要对“夹逼”剩下的那个数单独做一次判断，这一步称之为“后处理”。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（6）退出循环的时候，可能需要对“夹逼”剩下的那个数单独做一次判断，这一步称之为“后处理”。"}},[t._v("#")]),t._v(" （6）退出循环的时候，可能需要对“夹逼”剩下的那个数单独做一次判断，这一步称之为“后处理”。")]),t._v(" "),a("p",[t._v("二分查找法之所以高效，是因为它利用了数组有序的特点，在每一次的搜索过程中，都可以排除将近一半的数，"),a("strong",[t._v("使得搜索区间越来越小，直到区间成为一个数")]),t._v("。回到这一节最开始的疑问：“区间左右边界相等（即收缩成 1 个数）时，这个数是否会漏掉”，解释如下：")]),t._v(" "),a("p",[t._v("1、"),a("strong",[t._v("如果你的业务逻辑保证了你要找的数一定在左边界和右边界所表示的区间里出现")]),t._v("，那么可以放心地返回 "),a("code",[t._v("left")]),t._v(" 或者 "),a("code",[t._v("right")]),t._v("，无需再做判断；")]),t._v(" "),a("p",[t._v("2、如果你的业务逻辑不能保证你要找的数一定在左边界和右边界所表示的区间里出现，那么只要在退出循环以后，再针对 "),a("code",[t._v("nums[left]")]),t._v(" 或者 "),a("code",[t._v("nums[right]")]),t._v(" （此时 "),a("code",[t._v("nums[left] == nums[right]")]),t._v("）单独作一次判断，看它是不是你要找的数即可，这一步操作常常叫做“后处理”。")]),t._v(" "),a("ul",[a("li",[t._v("如果你能确定候选区间里目标元素一定存在，则不必做“后处理”。")])]),t._v(" "),a("p",[t._v("例：LeetCode 第 69 题：x 的平方根")]),t._v(" "),a("blockquote",[a("p",[t._v("实现 "),a("code",[t._v("int sqrt(int x)")]),t._v(" 函数。")]),t._v(" "),a("p",[t._v("计算并返回 x 的平方根，其中 x 是非负整数。")]),t._v(" "),a("p",[t._v("由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。")])]),t._v(" "),a("p",[t._v("分析：非负实数 x 的平方根在 "),a("code",[t._v("[0, x]")]),t._v(" 内一定存在，故退出 "),a("code",[t._v("while (left < right)")]),t._v(" 循环以后，不必单独判断 "),a("code",[t._v("left")]),t._v(" 或者 "),a("code",[t._v("right")]),t._v(" 是否符合题意。")]),t._v(" "),a("ul",[a("li",[t._v("如果你不能确定候选区间里目标元素一定存在，需要单独做一次判断。")])]),t._v(" "),a("p",[t._v("例：LeetCode 第 704 题：二分查找")]),t._v(" "),a("blockquote",[a("p",[t._v("给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。")])]),t._v(" "),a("p",[t._v("分析：因为目标数有可能不在数组中，当候选区间夹逼成一个数的时候，要单独判断一下这个数是不是目标数，如果不是，返回 -1。")]),t._v(" "),a("h4",{attrs:{id:"（7）取中位数的时候，要避免在计算上出现整型溢出；"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（7）取中位数的时候，要避免在计算上出现整型溢出；"}},[t._v("#")]),t._v(" （7）取中位数的时候，要避免在计算上出现整型溢出；")]),t._v(" "),a("p",[a("code",[t._v("int mid = (left + right) / 2;")]),t._v(" 的问题：在 "),a("code",[t._v("left")]),t._v(" 和 "),a("code",[t._v("right")]),t._v(" 很大的时候，"),a("code",[t._v("left + right")]),t._v(" 会发生整型溢出，变成负数，这是一个 bug ，得改！")]),t._v(" "),a("p",[a("code",[t._v("int mid = left + (right - left) / 2;")]),t._v(" 在 "),a("code",[t._v("right")]),t._v(" 很大、 "),a("code",[t._v("left")]),t._v(" 是负数且很小的时候， "),a("code",[t._v("right - left")]),t._v(" 也有可能超过 int 类型能表示的最大值，只不过一般情况下 "),a("code",[t._v("left")]),t._v(" 和 "),a("code",[t._v("right")]),t._v(" 表示的是数组索引值，"),a("code",[t._v("left")]),t._v(" 是非负数，因此 "),a("code",[t._v("right - left")]),t._v(" 溢出的可能性很小。因此，它是正确的写法。下面介绍推荐的写法。")]),t._v(" "),a("p",[a("code",[t._v("int mid = (left + right) >>> 1;")]),t._v(" "),a("strong",[t._v("如果这样写， "),a("code",[t._v("left + right")]),t._v(" 在发生整型溢出以后，会变成负数，此时如果除以 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("2")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("2")])])])]),t._v(" ，"),a("code",[t._v("mid")]),t._v(" 是一个负数，但是经过无符号右移，可以得到在不溢出的情况下正确的结果")]),t._v("。")]),t._v(" "),a("p",[t._v("解释“无符号右移”：在 Java 中，无符号右移运算符 "),a("code",[t._v(">>>")]),t._v(" 和右移运算符 "),a("code",[t._v(">>")]),t._v(" 的区别如下：")]),t._v(" "),a("ul",[a("li",[t._v("右移运算符 "),a("code",[t._v(">>")]),t._v(" 在右移时，丢弃右边指定位数，左边补上符号位；")]),t._v(" "),a("li",[t._v("无符号右移运算符 "),a("code",[t._v(">>>")]),t._v(" 在右移时，丢弃右边指定位数，左边补上 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("0")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("0")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("0")])])])]),t._v("，也就是说，对于正数来说，二者一样，而负数通过 "),a("code",[t._v(">>>")]),t._v(" 后能变成正数。")])]),t._v(" "),a("p",[t._v("下面解释上面的模板中，取中位数的时候使用先用“＋”，然后“无符号右移”。")]),t._v(" "),a("p",[t._v("1、"),a("code",[t._v("int mid = (left + right) / 2")]),t._v(" 与 "),a("code",[t._v("int mid = left + (right - left) / 2")]),t._v(" 两种写法都有整型溢出的风险，没有哪一个是绝对安全的，注意：这里我们取平均值用的是除以 2，并且是整除：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("int mid = (left + right) / 2")]),t._v(" 在 "),a("code",[t._v("left")]),t._v(" 和 "),a("code",[t._v("right")]),t._v(" 都很大的时候会溢出；")]),t._v(" "),a("li",[a("code",[t._v("int mid = left + (right - left) / 2")]),t._v(" 在 "),a("code",[t._v("right")]),t._v(" 很大，且 "),a("code",[t._v("left")]),t._v(" 是负数且很小的时候会溢出；")])]),t._v(" "),a("p",[t._v("2、写算法题的话，一般是让你在数组中做二分查找，因此 "),a("code",[t._v("left")]),t._v(" 和 "),a("code",[t._v("right")]),t._v(" 一般都表示数组的索引，因此 "),a("code",[t._v("left")]),t._v(" 在绝大多数情况下不会是负数并且很小，因此使用  "),a("code",[t._v("int mid = left + (right - left) // 2")]),t._v("  相对 "),a("code",[t._v("int mid = (left + right) // 2")]),t._v(" 更安全一些，并且也能向别人展示我们注意到了整型溢出这种情况，但事实上，还有更好的方式；")]),t._v(" "),a("p",[t._v("3、建议使用 "),a("code",[t._v("int mid = (left + right) >>> 1")]),t._v(" 这种写法，其实是大有含义的：")]),t._v(" "),a("blockquote",[a("p",[t._v("JDK8 中采用 "),a("code",[t._v("int mid = (left + right) >>> 1")]),t._v(" ，重点不在 "),a("code",[t._v("+")]),t._v(" ，而在 "),a("code",[t._v(">>>")]),t._v(" 。")])]),t._v(" "),a("p",[t._v("我们看极端的情况，"),a("code",[t._v("left")]),t._v(" 和 "),a("code",[t._v("high")]),t._v(" 都是整型最大值的时候，注意，此时 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("32")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("32")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("3")]),a("span",{staticClass:"mord"},[t._v("2")])])])]),t._v(" 位整型最大值它的二进制表示的最高位是 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("0")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("0")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("0")])])])]),t._v("，它们相加以后，最高位是 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("1")])])])]),t._v(" ，变成负数，但是再经过无符号右移 "),a("code",[t._v(">>>")]),t._v("（"),a("strong",[t._v("重点是忽略了符号位")]),t._v("，空位都以 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("0")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("0")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("0")])])])]),t._v(" 补齐），就能保证使用 "),a("code",[t._v("+")]),t._v(" 在整型溢出了以后结果还是正确的。")]),t._v(" "),a("p",[t._v("Java 中 "),a("code",[t._v("Collections")]),t._v(" 和 "),a("code",[t._v("Arrays")]),t._v(" 提供的 "),a("code",[t._v("binarySearch")]),t._v(" 方法，我们点进去看 "),a("code",[t._v("left")]),t._v(" 和 "),a("code",[t._v("right")]),t._v(" 都表示索引，使用无符号右移又不怕整型溢出，那就用 "),a("code",[t._v("int mid = (left + right) >>> 1")]),t._v("  好啦。位运算本来就比使用除法快，这样看来使用 "),a("code",[t._v("+")]),t._v(" 和 "),a("code",[t._v("<<<")]),t._v(" 真的是又快又好了。")]),t._v(" "),a("p",[t._v("我想这一点可能是 JDK8 的编写者们更层次的考量。")]),t._v(" "),a("p",[t._v("看来以后写算法题，就用  "),a("code",[t._v("int mid = (left + right) >>> 1")]),t._v(" 吧，反正更多的时候 "),a("code",[t._v("left")]),t._v(" 和 "),a("code",[t._v("right")]),t._v(" 表示索引。")]),t._v(" "),a("h4",{attrs:{id:"（8）编码一旦出现死循环，输出必要的变量值、分支逻辑是调试的重要方法。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（8）编码一旦出现死循环，输出必要的变量值、分支逻辑是调试的重要方法。"}},[t._v("#")]),t._v(" （8）编码一旦出现死循环，输出必要的变量值、分支逻辑是调试的重要方法。")]),t._v(" "),a("p",[t._v("当出现死循环的时候的调试方法：打印输出左右边界、中位数的值和目标值、分支逻辑等必要的信息。")]),t._v(" "),a("p",[t._v("按照我的经验，一开始编码的时候，稍不注意就很容易出现死循环，不过没有关系，你可以你的代码中写上一些输出语句，就容易理解“在区间元素只有 2 个的时候容易出现死循环”。具体编码调试的细节，可以参考我在「力扣」第 69 题：x 的平方根的题解"),a("a",{attrs:{href:"https://leetcode-cn.com/problems/sqrtx/solution/er-fen-cha-zhao-niu-dun-fa-python-dai-ma-by-liweiw/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《二分查找 + 牛顿法（Python 代码、Java 代码）》"),a("OutboundLink")],1),t._v(" 。")]),t._v(" "),a("h3",{attrs:{id:"_6、总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、总结"}},[t._v("#")]),t._v(" 6、总结")]),t._v(" "),a("p",[t._v("总结一下，我爱用这个模板的原因、技巧、优点和注意事项：")]),t._v(" "),a("h4",{attrs:{id:"（1）原因："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（1）原因："}},[t._v("#")]),t._v(" （1）原因：")]),t._v(" "),a("blockquote",[a("p",[t._v("无脑地写 "),a("code",[t._v("while left < right:")]),t._v(" ，这样你就不用判断，在退出循环的时候你应该返回 "),a("code",[t._v("left")]),t._v(" 还是 "),a("code",[t._v("right")]),t._v("，因为返回 "),a("code",[t._v("left")]),t._v(" 或者 "),a("code",[t._v("right")]),t._v(" 都对；")])]),t._v(" "),a("h4",{attrs:{id:"（2）技巧："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（2）技巧："}},[t._v("#")]),t._v(" （2）技巧：")]),t._v(" "),a("blockquote",[a("p",[t._v("先写分支逻辑，并且先写排除中位数的逻辑分支（因为更多时候排除中位数的逻辑容易想，但是前面我也提到过，这并不绝对），另一个分支的逻辑你就不用想了，写出第 1 个分支的反面代码即可（下面的说明中有介绍），再根据分支的情况选择使用左中位数还是右中位数；")])]),t._v(" "),a("p",[a("strong",[t._v("说明")]),t._v("：这里再多说一句。如果从代码可读性角度来说，只要是你认为好想的逻辑分支，就把它写在前面，并且加上你的注释，这样方便别人理解，而另一个分支，你就不必考虑它的逻辑了。有的时候另一个分支的逻辑并不太好想，容易把自己绕进去。如果你练习做得多了，会形成条件反射。")]),t._v(" "),a("p",[t._v("我简单总结了一下，左右分支的规律就如下两点：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果第 1 个分支的逻辑是“左边界排除中位数”（"),a("code",[t._v("left = mid + 1")]),t._v("），那么第 2 个分支的逻辑就一定是“右边界不排除中位数”（"),a("code",[t._v("right = mid")]),t._v("），反过来也成立；")])]),t._v(" "),a("li",[a("p",[t._v("如果第 2 个分支的逻辑是“右边界排除中位数”（"),a("code",[t._v("right = mid - 1")]),t._v("），那么第 2 个分支的逻辑就一定是“左边界不排除中位数”（"),a("code",[t._v("left = mid")]),t._v("），反之也成立。")])])]),t._v(" "),a("p",[t._v("“反过来也成立”的意思是：如果在你的逻辑中，“边界不能排除中位数”的逻辑好想，你就把它写在第 1 个分支，另一个分支是它的反面，你可以不用管逻辑是什么，按照上面的规律直接给出代码就可以了。能这么做的理论依据就是“排除法”。")]),t._v(" "),a("p",[t._v("在「力扣」第 287 题：寻找重复数的题解"),a("a",{attrs:{href:"https://leetcode-cn.com/problems/find-the-duplicate-number/solution/er-fen-fa-si-lu-ji-dai-ma-python-by-liweiwei1419/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《二分法（Python 代码、Java 代码）》"),a("OutboundLink")],1),t._v("和这篇题解的评论区中，有我和用户\n"),a("a",{attrs:{href:"/u/fighterhit-sgskDjhsr1"}},[t._v("@fighterhit")]),t._v(" 给出的代码，在一些情况下，我们先写了不排除中位数的逻辑分支，更合适的标准就是“哪个逻辑分支好想，就先写哪一个”，欢迎大家参与讨论。")]),t._v(" "),a("h4",{attrs:{id:"（3）优点："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（3）优点："}},[t._v("#")]),t._v(" （3）优点：")]),t._v(" "),a("blockquote",[a("p",[t._v("分支条数只有 2 条，代码执行效率更高，不用在每一轮循环中单独判断中位数是否符合题目要求，"),a("strong",[t._v("写分支的逻辑的目的是尽量排除更多的候选元素")]),t._v("，而判断中位数是否符合题目要求我们放在最后进行，这就是第 5 点；")])]),t._v(" "),a("p",[a("strong",[t._v("说明")]),t._v("：每一轮循环开始都单独判断中位数是否符合要求，这个操作不是很有普适性，因为从统计意义上说，中位数直接就是你想找的数的概率并不大，有的时候还要看看左边，还要看看右边。不妨就把它放在最后来看，把候选区间“夹逼”到只剩 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("1")])])])]),t._v(" 个元素的时候，视情况单独再做判断即可。")]),t._v(" "),a("h4",{attrs:{id:"（4）注意事项-1："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（4）注意事项-1："}},[t._v("#")]),t._v(" （4）注意事项 1：")]),t._v(" "),a("blockquote",[a("p",[t._v("左中位数还是右中位数选择的标准根据分支的逻辑而来，标准是每一次循环都应该让区间收缩，当候选区间只剩下 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("2")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("2")])])])]),t._v(" 个元素的时候，为了避免死循环发生，选择正确的中位数类型。如果你实在很晕，不防就使用有 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("2")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("2")])])])]),t._v(" 个元素的测试用例，就能明白其中的原因，另外在代码出现死循环的时候，建议你可以将左边界、右边界、你选择的中位数的值，还有分支逻辑都打印输出一下，出现死循环的原因就一目了然了；")])]),t._v(" "),a("h4",{attrs:{id:"（5）注意事项-2："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（5）注意事项-2："}},[t._v("#")]),t._v(" （5）注意事项 2：")]),t._v(" "),a("blockquote",[a("p",[t._v("如果能确定要找的数就在候选区间里，那么退出循环的时候，区间最后收缩成为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("1")])])])]),t._v(" 个数后，直接把这个数返回即可；如果你要找的数有可能不在候选区间里，区间最后收缩成为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("1")])])])]),t._v(" 个数后，还要单独判断一下这个数是否符合题意。")])]),t._v(" "),a("p",[t._v("最后给出两个模板，大家看的时候看注释，不必也无需记忆它们。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/1f4a89b84c594cfe134b56974307f1f0e0e69d3e1c92304b1469d4b3beaf428f-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%A8%A1%E6%9D%BF-1.png",alt:"二分查找模板-1.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/fe70575e6259499935494beb0806b8fb095a7f36e1910dc8981ebde494f444b5-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%A8%A1%E6%9D%BF-2.png",alt:"二分查找模板-2.png"}})]),t._v(" "),a("p",[a("strong",[t._v("说明")]),t._v("：我写的时候，一般是先默认将中位数写成左中位数，再根据分支的情况，看看是否有必要调整成右中位数，即是不是要在 "),a("code",[t._v("(right - left)")]),t._v(" 这个括号里面加 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("1")])])])]),t._v(" 。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("虽说是两个模板，区别在于选中位数，中位数根据分支逻辑来选，原则是区间要收缩，且不出现死循环，退出循环的时候，视情况，有可能需要对最后剩下的数单独做判断")]),t._v("。")])]),t._v(" "),a("p",[t._v("我想我应该是成功地把你绕晕了，如果您觉得啰嗦的地方，就当我是“重要的事情说了三遍”吧，确实是重点的地方我才会重复说。当然，最好的理解这个模板的方法还是应用它。在此建议您不妨多做几道使用“二分查找法”解决的问题，用一下我说的这个模板，"),a("strong",[t._v("在发现问题的过程中，体会这个模板好用的地方，相信你一定会和我一样爱上这个模板的")]),t._v("。")]),t._v(" "),a("p",[t._v("在「力扣」的"),a("a",{attrs:{href:"https://leetcode-cn.com/explore/learn/card/binary-search/",target:"_blank",rel:"noopener noreferrer"}},[t._v("探索"),a("OutboundLink")],1),t._v("版块中，给出了二分查找法的 3 个模板，我这篇文章着重介绍了第 2 个模板，但是我介绍的角度和这个版块中给出的角度并不一样，第 1 个模板被我“嫌弃”了，第 3 个模板我看过了，里面给出的例题也可以用第 2 个模板来完成，如果大家有什么使用心得，欢迎与我交流。")]),t._v(" "),a("h3",{attrs:{id:"_7、应用提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、应用提升"}},[t._v("#")]),t._v(" 7、应用提升")]),t._v(" "),a("p",[t._v("这里给出一些练习题，这些练习题都可以使用这个“神奇的”二分查找法模板比较轻松地写出来，并且得到一个不错的分数，大家加油！")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/24eb35b3377f5ebb88bdb8dc2178ab84d53d9f94f91c8a8bab280f696850fc90-image.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-search/",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),a("OutboundLink")],1),t._v("。这道题是二分查找的模板题，因为目标值有可能在数组中并不存在，所以退出 "),a("code",[t._v("while")]),t._v(" 循环的时候，要单独判断一下。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/996293bccc6264f16c1875d5ad50cbe190c249e536365e01f07ff142e0954f2a-image.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/sqrtx/",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("（1）题解链接已经在上文中已经给出，这道题根据分支的逻辑应该选右中位数；")]),t._v(" "),a("p",[t._v("（2）这道题因为还有更高效的“牛顿法”，所以看起来排名并不是特别理想。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/c6dfef7a6d7c6138b7873e134f7196e14bb48a758965ecb8c774a18e4f2923ba-image.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),a("OutboundLink")],1),t._v("，第 300 题的一个子过程就是本题（第 35 题），我在这道题的题解"),a("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/dong-tai-gui-hua-er-fen-cha-zhao-tan-xin-suan-fa-p/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《动态规划 + 贪心算法（二分法）（Python 代码、Java 代码）》"),a("OutboundLink")],1),t._v(" 中给了两个 Python 的示例代码，它们是对本文中给出的注意事项：")]),t._v(" "),a("blockquote",[a("p",[t._v("如果你确定要搜索的数在区间里，循环完成以后直接返回即可；如果你不确定要搜索的数在区间里，循环完成以后需要再做一次判断。")])]),t._v(" "),a("p",[t._v("的具体代码实现。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/8bd0389e497c609bf4c5e83f296d02e2e02757ba3cc2611eed1e53bc37de643d-image.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),a("OutboundLink")],1),t._v("，二分查找法还可以用于部分有序数组中元素的查找。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/c2d128bbe8d4d66d3c1197cf99dc0414ee47f60656143054c2b754ddc033f82d-image.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/description/",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/1a86720369f28cb7c9b17afb41bf624f3969224ccaaa0b1e26365f427c414c3e-image.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/find-the-duplicate-number/",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),a("OutboundLink")],1),t._v("，这道题是对“数”作二分，而不是对索引做二分，具体可以参考我写的题解"),a("a",{attrs:{href:"https://leetcode-cn.com/problems/find-the-duplicate-number/solution/er-fen-fa-si-lu-ji-dai-ma-python-by-liweiwei1419/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《二分法（Python 代码、Java 代码）》"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("这里要感谢一下「力扣」的用户 "),a("a",{attrs:{href:"/u/gu-xie-feng"}},[t._v("@顾叶峰")]),t._v("，他提醒了我“慎用 L 啊，跟 1 傻傻分不清楚了”，根据他的建议，我正在尽力修改以前我写的题解（包括本文）。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/c203e0c6f9723b0ce5f579ada5bf51334bf6a730dffeab0b779531f23a28d796-image.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/find-in-mountain-array/submissions/",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),a("OutboundLink")],1),t._v("。这道题很有意思，做这一道题等于做了 3 道二分查找的问题，并且，你还会发现，这 3 个二分查找的问题写出来的分支都是一样的，因此它们选中位数的时候，都选择了左中位数。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/6454322ea2748b7e8ce7c26b1bbabcfba971e2fb76c95cc2aa14561588a6adc8-image.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/find-k-closest-elements/",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),a("OutboundLink")],1),t._v("。这道题是「力扣」的"),a("a",{attrs:{href:"https://leetcode-cn.com/explore/learn/card/binary-search/",target:"_blank",rel:"noopener noreferrer"}},[t._v("探索"),a("OutboundLink")],1),t._v("版块里给出了二分查找法的 3 个模板中第 3 个模板的练习题，实际上也可以用我给出的这个模板（即“探索”里面的第 2 个模板）来完成，这道题我也写了题解"),a("a",{attrs:{href:"https://leetcode-cn.com/problems/find-k-closest-elements/solution/pai-chu-fa-shuang-zhi-zhen-er-fen-fa-python-dai-ma/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《排除法（双指针） + 二分法（Python 代码、Java 代码）》"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/2866b14774fac95dbb31e224b89508eb81e5729e803e3c415012dd9c5598d62f-image.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/median-of-two-sorted-arrays/",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),a("OutboundLink")],1),t._v("，这道题我也写了题解"),a("a",{attrs:{href:"https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/he-bing-yi-hou-zhao-gui-bing-guo-cheng-zhong-zhao-/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《合并以后找 + 归并过程中找 + 找两个数组的“边界线”（Python 代码、Java 代码）》"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"统计信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统计信息"}},[t._v("#")]),t._v(" 统计信息")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("通过次数")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("提交次数")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("AC比率")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("104230")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("232652")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("44.8%")])])])]),t._v(" "),a("h2",{attrs:{id:"提交历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交历史"}},[t._v("#")]),t._v(" 提交历史")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("提交时间")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("提交结果")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("执行时间")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("内存消耗")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("语言")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2018-04-30 22:09:37")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("a",{attrs:{href:"https://leetcode-cn.com//submissions/detail/1833698/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Accepted"),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("4 ms")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("N/A")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("java")])])])]),t._v(" "),a("h2",{attrs:{id:"相似题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相似题目"}},[t._v("#")]),t._v(" 相似题目")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("题目")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("难度")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("a",{attrs:{href:"https://leetcode-cn.com/problems/first-bad-version/",target:"_blank",rel:"noopener noreferrer"}},[t._v("第一个错误的版本"),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("简单")])])])])],1)}),[],!1,null,null,null);s.default=e.exports}}]);