(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{1205:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"英文原文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#英文原文"}},[s._v("#")]),s._v(" 英文原文")]),s._v(" "),n("div",[n("p",[s._v("Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.")]),s._v(" "),n("p",[n("b",[s._v("Example:")]),s._v(" "),n("pre",[n("b",[s._v("Input:")]),s._v(" 1->2->4, 1->3->4\n"),n("b",[s._v("Output:")]),s._v(" 1->1->2->3->4->4\n")])])]),s._v(" "),n("h2",{attrs:{id:"中文翻译"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中文翻译"}},[s._v("#")]),s._v(" 中文翻译")]),s._v(" "),n("div",[n("p",[s._v("将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 ")]),s._v(" "),n("p",[n("strong",[s._v("示例：")])]),s._v(" "),n("pre",[n("strong",[s._v("输入：")]),s._v("1->2->4, 1->3->4\n"),n("strong",[s._v("输出：")]),s._v("1->1->2->3->4->4\n")])]),s._v(" "),n("h2",{attrs:{id:"通过代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过代码"}},[s._v("#")]),s._v(" 通过代码")]),s._v(" "),n("RecoDemo",[n("template",{slot:"code-Java-1"},[n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                head"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                head"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])])]),s._v(" "),n("template",{slot:"code-Java-2"},[n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    l1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    l2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br")])])]),s._v(" "),n("template",{slot:"code-Java-1"},[n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                head"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                head"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])])]),s._v(" "),n("template",{slot:"code-Java-2"},[n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    l1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    l2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br")])])])],2),s._v(" "),n("h2",{attrs:{id:"官方题解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#官方题解"}},[s._v("#")]),s._v(" 官方题解")]),s._v(" "),n("h4",{attrs:{id:"方法-1：递归"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法-1：递归"}},[s._v("#")]),s._v(" 方法 1：递归")]),s._v(" "),n("p",[n("strong",[s._v("想法")])]),s._v(" "),n("p",[s._v("我们可以如下递归地定义在两个链表里的 "),n("code",[s._v("merge")]),s._v(" 操作（忽略边界情况，比如空链表等）：")]),s._v(" "),n("p",{staticClass:"katex-block"},[n("span",{staticClass:"katex-display"},[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mo",{attrs:{fence:"true"}},[s._v("{")]),n("mtable",{attrs:{rowspacing:"0.15999999999999992em",columnalign:"left left",columnspacing:"1em"}},[n("mtr",[n("mtd",[n("mstyle",{attrs:{scriptlevel:"0",displaystyle:"false"}},[n("mrow",[n("mi",[s._v("l")]),n("mi",[s._v("i")]),n("mi",[s._v("s")]),n("mi",[s._v("t")]),n("mn",[s._v("1")]),n("mo",{attrs:{stretchy:"false"}},[s._v("[")]),n("mn",[s._v("0")]),n("mo",{attrs:{stretchy:"false"}},[s._v("]")]),n("mo",[s._v("+")]),n("mi",[s._v("m")]),n("mi",[s._v("e")]),n("mi",[s._v("r")]),n("mi",[s._v("g")]),n("mi",[s._v("e")]),n("mo",{attrs:{stretchy:"false"}},[s._v("(")]),n("mi",[s._v("l")]),n("mi",[s._v("i")]),n("mi",[s._v("s")]),n("mi",[s._v("t")]),n("mn",[s._v("1")]),n("mo",{attrs:{stretchy:"false"}},[s._v("[")]),n("mn",[s._v("1")]),n("mo",[s._v(":")]),n("mo",{attrs:{stretchy:"false"}},[s._v("]")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mi",[s._v("l")]),n("mi",[s._v("i")]),n("mi",[s._v("s")]),n("mi",[s._v("t")]),n("mn",[s._v("2")]),n("mo",{attrs:{stretchy:"false"}},[s._v(")")])],1)],1)],1),n("mtd",[n("mstyle",{attrs:{scriptlevel:"0",displaystyle:"false"}},[n("mrow",[n("mi",[s._v("l")]),n("mi",[s._v("i")]),n("mi",[s._v("s")]),n("mi",[s._v("t")]),n("mn",[s._v("1")]),n("mo",{attrs:{stretchy:"false"}},[s._v("[")]),n("mn",[s._v("0")]),n("mo",{attrs:{stretchy:"false"}},[s._v("]")]),n("mo",[s._v("<")]),n("mi",[s._v("l")]),n("mi",[s._v("i")]),n("mi",[s._v("s")]),n("mi",[s._v("t")]),n("mn",[s._v("2")]),n("mo",{attrs:{stretchy:"false"}},[s._v("[")]),n("mn",[s._v("0")]),n("mo",{attrs:{stretchy:"false"}},[s._v("]")])],1)],1)],1)],1),n("mtr",[n("mtd",[n("mstyle",{attrs:{scriptlevel:"0",displaystyle:"false"}},[n("mrow",[n("mi",[s._v("l")]),n("mi",[s._v("i")]),n("mi",[s._v("s")]),n("mi",[s._v("t")]),n("mn",[s._v("2")]),n("mo",{attrs:{stretchy:"false"}},[s._v("[")]),n("mn",[s._v("0")]),n("mo",{attrs:{stretchy:"false"}},[s._v("]")]),n("mo",[s._v("+")]),n("mi",[s._v("m")]),n("mi",[s._v("e")]),n("mi",[s._v("r")]),n("mi",[s._v("g")]),n("mi",[s._v("e")]),n("mo",{attrs:{stretchy:"false"}},[s._v("(")]),n("mi",[s._v("l")]),n("mi",[s._v("i")]),n("mi",[s._v("s")]),n("mi",[s._v("t")]),n("mn",[s._v("1")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mi",[s._v("l")]),n("mi",[s._v("i")]),n("mi",[s._v("s")]),n("mi",[s._v("t")]),n("mn",[s._v("2")]),n("mo",{attrs:{stretchy:"false"}},[s._v("[")]),n("mn",[s._v("1")]),n("mo",[s._v(":")]),n("mo",{attrs:{stretchy:"false"}},[s._v("]")]),n("mo",{attrs:{stretchy:"false"}},[s._v(")")])],1)],1)],1),n("mtd",[n("mstyle",{attrs:{scriptlevel:"0",displaystyle:"false"}},[n("mrow",[n("mi",[s._v("o")]),n("mi",[s._v("t")]),n("mi",[s._v("h")]),n("mi",[s._v("e")]),n("mi",[s._v("r")]),n("mi",[s._v("w")]),n("mi",[s._v("i")]),n("mi",[s._v("s")]),n("mi",[s._v("e")])],1)],1)],1)],1)],1)],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("\\left\\{\n\\begin{array}{ll}\n      list1[0] + merge(list1[1:], list2) & list1[0] < list2[0] \\\\\n      list2[0] + merge(list1, list2[1:]) & otherwise\n\\end{array}\n\\right.\n")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"2.40003em","vertical-align":"-0.95003em"}}),n("span",{staticClass:"minner"},[n("span",{staticClass:"mopen delimcenter",staticStyle:{top:"0em"}},[n("span",{staticClass:"delimsizing size3"},[s._v("{")])]),n("span",{staticClass:"mord"},[n("span",{staticClass:"mtable"},[n("span",{staticClass:"arraycolsep",staticStyle:{width:"0.5em"}}),n("span",{staticClass:"col-align-l"},[n("span",{staticClass:"vlist-t vlist-t2"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"1.45em"}},[n("span",{staticStyle:{top:"-3.61em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[s._v("l")]),n("span",{staticClass:"mord mathdefault"},[s._v("i")]),n("span",{staticClass:"mord mathdefault"},[s._v("s")]),n("span",{staticClass:"mord mathdefault"},[s._v("t")]),n("span",{staticClass:"mord"},[s._v("1")]),n("span",{staticClass:"mopen"},[s._v("[")]),n("span",{staticClass:"mord"},[s._v("0")]),n("span",{staticClass:"mclose"},[s._v("]")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[s._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mord mathdefault"},[s._v("m")]),n("span",{staticClass:"mord mathdefault"},[s._v("e")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[s._v("r")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03588em"}},[s._v("g")]),n("span",{staticClass:"mord mathdefault"},[s._v("e")]),n("span",{staticClass:"mopen"},[s._v("(")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[s._v("l")]),n("span",{staticClass:"mord mathdefault"},[s._v("i")]),n("span",{staticClass:"mord mathdefault"},[s._v("s")]),n("span",{staticClass:"mord mathdefault"},[s._v("t")]),n("span",{staticClass:"mord"},[s._v("1")]),n("span",{staticClass:"mopen"},[s._v("[")]),n("span",{staticClass:"mord"},[s._v("1")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[s._v(":")]),n("span",{staticClass:"mclose"},[s._v("]")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[s._v("l")]),n("span",{staticClass:"mord mathdefault"},[s._v("i")]),n("span",{staticClass:"mord mathdefault"},[s._v("s")]),n("span",{staticClass:"mord mathdefault"},[s._v("t")]),n("span",{staticClass:"mord"},[s._v("2")]),n("span",{staticClass:"mclose"},[s._v(")")])])]),n("span",{staticStyle:{top:"-2.4099999999999997em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[s._v("l")]),n("span",{staticClass:"mord mathdefault"},[s._v("i")]),n("span",{staticClass:"mord mathdefault"},[s._v("s")]),n("span",{staticClass:"mord mathdefault"},[s._v("t")]),n("span",{staticClass:"mord"},[s._v("2")]),n("span",{staticClass:"mopen"},[s._v("[")]),n("span",{staticClass:"mord"},[s._v("0")]),n("span",{staticClass:"mclose"},[s._v("]")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[s._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mord mathdefault"},[s._v("m")]),n("span",{staticClass:"mord mathdefault"},[s._v("e")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[s._v("r")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03588em"}},[s._v("g")]),n("span",{staticClass:"mord mathdefault"},[s._v("e")]),n("span",{staticClass:"mopen"},[s._v("(")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[s._v("l")]),n("span",{staticClass:"mord mathdefault"},[s._v("i")]),n("span",{staticClass:"mord mathdefault"},[s._v("s")]),n("span",{staticClass:"mord mathdefault"},[s._v("t")]),n("span",{staticClass:"mord"},[s._v("1")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[s._v("l")]),n("span",{staticClass:"mord mathdefault"},[s._v("i")]),n("span",{staticClass:"mord mathdefault"},[s._v("s")]),n("span",{staticClass:"mord mathdefault"},[s._v("t")]),n("span",{staticClass:"mord"},[s._v("2")]),n("span",{staticClass:"mopen"},[s._v("[")]),n("span",{staticClass:"mord"},[s._v("1")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[s._v(":")]),n("span",{staticClass:"mclose"},[s._v("]")]),n("span",{staticClass:"mclose"},[s._v(")")])])])]),n("span",{staticClass:"vlist-s"},[s._v("​")])]),n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.9500000000000004em"}},[n("span")])])])]),n("span",{staticClass:"arraycolsep",staticStyle:{width:"0.5em"}}),n("span",{staticClass:"arraycolsep",staticStyle:{width:"0.5em"}}),n("span",{staticClass:"col-align-l"},[n("span",{staticClass:"vlist-t vlist-t2"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"1.45em"}},[n("span",{staticStyle:{top:"-3.61em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[s._v("l")]),n("span",{staticClass:"mord mathdefault"},[s._v("i")]),n("span",{staticClass:"mord mathdefault"},[s._v("s")]),n("span",{staticClass:"mord mathdefault"},[s._v("t")]),n("span",{staticClass:"mord"},[s._v("1")]),n("span",{staticClass:"mopen"},[s._v("[")]),n("span",{staticClass:"mord"},[s._v("0")]),n("span",{staticClass:"mclose"},[s._v("]")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[s._v("<")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[s._v("l")]),n("span",{staticClass:"mord mathdefault"},[s._v("i")]),n("span",{staticClass:"mord mathdefault"},[s._v("s")]),n("span",{staticClass:"mord mathdefault"},[s._v("t")]),n("span",{staticClass:"mord"},[s._v("2")]),n("span",{staticClass:"mopen"},[s._v("[")]),n("span",{staticClass:"mord"},[s._v("0")]),n("span",{staticClass:"mclose"},[s._v("]")])])]),n("span",{staticStyle:{top:"-2.4099999999999997em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord mathdefault"},[s._v("o")]),n("span",{staticClass:"mord mathdefault"},[s._v("t")]),n("span",{staticClass:"mord mathdefault"},[s._v("h")]),n("span",{staticClass:"mord mathdefault"},[s._v("e")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[s._v("r")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02691em"}},[s._v("w")]),n("span",{staticClass:"mord mathdefault"},[s._v("i")]),n("span",{staticClass:"mord mathdefault"},[s._v("s")]),n("span",{staticClass:"mord mathdefault"},[s._v("e")])])])]),n("span",{staticClass:"vlist-s"},[s._v("​")])]),n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.9500000000000004em"}},[n("span")])])])]),n("span",{staticClass:"arraycolsep",staticStyle:{width:"0.5em"}})])]),n("span",{staticClass:"mclose nulldelimiter"})])])])])])]),s._v(" "),n("p",[s._v("也就是说，两个链表头部较小的一个与剩下元素的 "),n("code",[s._v("merge")]),s._v(" 操作结果合并。")]),s._v(" "),n("p",[n("strong",[s._v("算法")]),s._v("\n我们直接将以上递归过程建模，首先考虑边界情况。\n特殊的，如果 "),n("code",[s._v("l1")]),s._v(" 或者 "),n("code",[s._v("l2")]),s._v(" 一开始就是 "),n("code",[s._v("null")]),s._v(" ，那么没有任何操作需要合并，所以我们只需要返回非空链表。否则，我们要判断 "),n("code",[s._v("l1")]),s._v(" 和 "),n("code",[s._v("l2")]),s._v(" 哪一个的头元素更小，然后递归地决定下一个添加到结果里的值。如果两个链表都是空的，那么过程终止，所以递归过程最终一定会终止。")]),s._v(" "),n("div",{staticClass:"language-Java [] line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("div",{staticClass:"language-Python [] line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" l1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l2\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" l2 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l1\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mergeTwoLists"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l1\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mergeTwoLists"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l2\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[n("strong",[s._v("复杂度分析")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("时间复杂度："),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[s._v("O")]),n("mo",{attrs:{stretchy:"false"}},[s._v("(")]),n("mi",[s._v("n")]),n("mo",[s._v("+")]),n("mi",[s._v("m")]),n("mo",{attrs:{stretchy:"false"}},[s._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("O(n + m)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[s._v("O")]),n("span",{staticClass:"mopen"},[s._v("(")]),n("span",{staticClass:"mord mathdefault"},[s._v("n")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[s._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault"},[s._v("m")]),n("span",{staticClass:"mclose"},[s._v(")")])])])]),s._v("。 因为每次调用递归都会去掉 "),n("code",[s._v("l1")]),s._v(" 或者 "),n("code",[s._v("l2")]),s._v(" 的头元素（直到至少有一个链表为空），函数 "),n("code",[s._v("mergeTwoList")]),s._v(" 中只会遍历每个元素一次。所以，时间复杂度与合并后的链表长度为线性关系。")])]),s._v(" "),n("li",[n("p",[s._v("空间复杂度："),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[s._v("O")]),n("mo",{attrs:{stretchy:"false"}},[s._v("(")]),n("mi",[s._v("n")]),n("mo",[s._v("+")]),n("mi",[s._v("m")]),n("mo",{attrs:{stretchy:"false"}},[s._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("O(n + m)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[s._v("O")]),n("span",{staticClass:"mopen"},[s._v("(")]),n("span",{staticClass:"mord mathdefault"},[s._v("n")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[s._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault"},[s._v("m")]),n("span",{staticClass:"mclose"},[s._v(")")])])])]),s._v("。调用 "),n("code",[s._v("mergeTwoLists")]),s._v(" 退出时 "),n("code",[s._v("l1")]),s._v(" 和 "),n("code",[s._v("l2")]),s._v(" 中每个元素都一定已经被遍历过了，所以 "),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[s._v("n")]),n("mo",[s._v("+")]),n("mi",[s._v("m")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("n + m")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.66666em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord mathdefault"},[s._v("n")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[s._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),n("span",{staticClass:"mord mathdefault"},[s._v("m")])])])]),s._v(" 个栈帧会消耗 "),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[s._v("O")]),n("mo",{attrs:{stretchy:"false"}},[s._v("(")]),n("mi",[s._v("n")]),n("mo",[s._v("+")]),n("mi",[s._v("m")]),n("mo",{attrs:{stretchy:"false"}},[s._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("O(n + m)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[s._v("O")]),n("span",{staticClass:"mopen"},[s._v("(")]),n("span",{staticClass:"mord mathdefault"},[s._v("n")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[s._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault"},[s._v("m")]),n("span",{staticClass:"mclose"},[s._v(")")])])])]),s._v(" 的空间。")])])]),s._v(" "),n("h4",{attrs:{id:"方法-2：迭代"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法-2：迭代"}},[s._v("#")]),s._v(" 方法 2：迭代")]),s._v(" "),n("p",[n("strong",[s._v("想法")])]),s._v(" "),n("p",[s._v("我们可以用迭代的方法来实现上述算法。我们假设 "),n("code",[s._v("l1")]),s._v(" 元素严格比 "),n("code",[s._v("l2")]),s._v("元素少，我们可以将 "),n("code",[s._v("l2")]),s._v(" 中的元素逐一插入 "),n("code",[s._v("l1")]),s._v(" 中正确的位置。")]),s._v(" "),n("p",[n("strong",[s._v("算法")])]),s._v(" "),n("p",[s._v('首先，我们设定一个哨兵节点 "'),n("code",[s._v("prehead")]),s._v('" ，这可以在最后让我们比较容易地返回合并后的链表。我们维护一个 '),n("code",[s._v("prev")]),s._v(" 指针，我们需要做的是调整它的 "),n("code",[s._v("next")]),s._v(" 指针。然后，我们重复以下过程，直到 "),n("code",[s._v("l1")]),s._v(" 或者 "),n("code",[s._v("l2")]),s._v(" 指向了 "),n("code",[s._v("null")]),s._v(" ：如果 "),n("code",[s._v("l1")]),s._v(" 当前位置的值小于等于 "),n("code",[s._v("l2")]),s._v(" ，我们就把 "),n("code",[s._v("l1")]),s._v(" 的值接在 "),n("code",[s._v("prev")]),s._v(" 节点的后面同时将 "),n("code",[s._v("l1")]),s._v(" 指针往后移一个。否则，我们对 "),n("code",[s._v("l2")]),s._v(" 做同样的操作。不管我们将哪一个元素接在了后面，我们都把 "),n("code",[s._v("prev")]),s._v(" 向后移一个元素。")]),s._v(" "),n("p",[s._v("在循环终止的时候， "),n("code",[s._v("l1")]),s._v(" 和 "),n("code",[s._v("l2")]),s._v(" 至多有一个是非空的。由于输入的两个链表都是有序的，所以不管哪个链表是非空的，它包含的所有元素都比前面已经合并链表中的所有元素都要大。这意味着我们只需要简单地将非空链表接在合并链表的后面，并返回合并链表。")]),s._v(" "),n("p",[s._v("<"),n("img",{attrs:{src:a(867),alt:"image.png"}}),s._v(", "),n("img",{attrs:{src:a(868),alt:"image.png"}}),s._v(", "),n("img",{attrs:{src:a(869),alt:"image.png"}}),s._v(", "),n("img",{attrs:{src:a(870),alt:"image.png"}}),s._v(", "),n("img",{attrs:{src:a(871),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(872),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(873),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(874),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(875),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(876),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(877),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(878),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(879),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(880),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(881),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(882),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(883),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(884),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(885),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(886),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(887),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(888),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(889),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(890),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(891),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(892),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(893),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(894),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(895),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(896),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(897),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(898),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(899),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(900),alt:"image.png"}}),s._v(","),n("img",{attrs:{src:a(901),alt:"image.png"}}),s._v(">")]),s._v(" "),n("div",{staticClass:"language-Java [] line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// maintain an unchanging reference to node ahead of the return node.")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" prehead "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" prehead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// exactly one of l1 and l2 can be non-null at this point, so connect")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the non-null list to the end of the merged list.")]),s._v("\n        prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" prehead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("div",{staticClass:"language-Python [] line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# maintain an unchanging reference to node ahead of the return node.")]),s._v("\n        prehead "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ListNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" prehead\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" l1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l1\n                l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l2\n                l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v("            \n            prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# exactly one of l1 and l2 can be non-null at this point, so connect")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the non-null list to the end of the merged list.")]),s._v("\n        prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" l1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" l2\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" prehead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[n("strong",[s._v("复杂度分析")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("时间复杂度："),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[s._v("O")]),n("mo",{attrs:{stretchy:"false"}},[s._v("(")]),n("mi",[s._v("n")]),n("mo",[s._v("+")]),n("mi",[s._v("m")]),n("mo",{attrs:{stretchy:"false"}},[s._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("O(n + m)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[s._v("O")]),n("span",{staticClass:"mopen"},[s._v("(")]),n("span",{staticClass:"mord mathdefault"},[s._v("n")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[s._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault"},[s._v("m")]),n("span",{staticClass:"mclose"},[s._v(")")])])])]),s._v(" 。因为每次循环迭代中，"),n("code",[s._v("l1")]),s._v(" 和 "),n("code",[s._v("l2")]),s._v(" 只有一个元素会被放进合并链表中， "),n("code",[s._v("while")]),s._v(" 循环的次数等于两个链表的总长度。所有其他工作都是常数级别的，所以总的时间复杂度是线性的。")])]),s._v(" "),n("li",[n("p",[s._v("空间复杂度："),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[s._v("O")]),n("mo",{attrs:{stretchy:"false"}},[s._v("(")]),n("mn",[s._v("1")]),n("mo",{attrs:{stretchy:"false"}},[s._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("O(1)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[s._v("O")]),n("span",{staticClass:"mopen"},[s._v("(")]),n("span",{staticClass:"mord"},[s._v("1")]),n("span",{staticClass:"mclose"},[s._v(")")])])])]),s._v(" 。迭代的过程只会产生几个指针，所以它所需要的空间是常数级别的。")])])]),s._v(" "),n("h2",{attrs:{id:"统计信息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#统计信息"}},[s._v("#")]),s._v(" 统计信息")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[s._v("通过次数")]),s._v(" "),n("th",{staticStyle:{"text-align":"center"}},[s._v("提交次数")]),s._v(" "),n("th",{staticStyle:{"text-align":"center"}},[s._v("AC比率")])])]),s._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[s._v("164387")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("278385")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("59.1%")])])])]),s._v(" "),n("h2",{attrs:{id:"提交历史"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#提交历史"}},[s._v("#")]),s._v(" 提交历史")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[s._v("提交时间")]),s._v(" "),n("th",{staticStyle:{"text-align":"center"}},[s._v("提交结果")]),s._v(" "),n("th",{staticStyle:{"text-align":"center"}},[s._v("执行时间")]),s._v(" "),n("th",{staticStyle:{"text-align":"center"}},[s._v("战胜比例")]),s._v(" "),n("th",{staticStyle:{"text-align":"center"}},[s._v("内存消耗")]),s._v(" "),n("th",{staticStyle:{"text-align":"center"}},[s._v("语言")])])]),s._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[s._v("2018-04-26 23:29:11")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[n("a",{attrs:{href:"https://leetcode-cn.com//submissions/detail/1731093/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Accepted"),n("OutboundLink")],1)]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("13 ms")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("82.77%")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("N/A")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("java")])]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[s._v("2018-04-26 23:25:34")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[n("a",{attrs:{href:"https://leetcode-cn.com//submissions/detail/1730958/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Accepted"),n("OutboundLink")],1)]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("37 ms")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("82.77%")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("N/A")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("java")])])])]),s._v(" "),n("h2",{attrs:{id:"相似题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相似题目"}},[s._v("#")]),s._v(" 相似题目")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[s._v("题目")]),s._v(" "),n("th",{staticStyle:{"text-align":"center"}},[s._v("难度")])])]),s._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[n("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[s._v("合并K个排序链表"),n("OutboundLink")],1)]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("困难")])]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[n("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[s._v("合并两个有序数组"),n("OutboundLink")],1)]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("简单")])]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[n("a",{attrs:{href:"https://leetcode-cn.com/problems/sort-list/",target:"_blank",rel:"noopener noreferrer"}},[s._v("排序链表"),n("OutboundLink")],1)]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("中等")])]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[n("a",{attrs:{href:"https://leetcode-cn.com/problems/shortest-word-distance-ii/",target:"_blank",rel:"noopener noreferrer"}},[s._v("最短单词距离 II"),n("OutboundLink")],1)]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("中等")])])])])],1)}),[],!1,null,null,null);t.default=e.exports},867:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-0.ea36ed60.png"},868:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-1.b3fabc00.png"},869:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-2.63543a66.png"},870:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-3.29e3fe38.png"},871:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-4.5a8f674d.png"},872:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-5.6ef93a1b.png"},873:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-6.eb485083.png"},874:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-7.97aedee0.png"},875:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-8.c649abdb.png"},876:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-9.e61b4ca3.png"},877:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-10.2e5aa7a5.png"},878:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-11.a7645e2b.png"},879:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-12.d791ac5c.png"},880:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-13.686348e2.png"},881:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-14.4eb7c865.png"},882:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-15.3622f55e.png"},883:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-16.452ab805.png"},884:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-17.c85ee602.png"},885:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-18.9ae880af.png"},886:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-19.bb7ef62b.png"},887:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-20.c85ee602.png"},888:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-21.f92b41fb.png"},889:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-22.f3a99133.png"},890:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-23.b951fcf9.png"},891:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-24.2196a938.png"},892:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-25.86574704.png"},893:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-26.00b8821a.png"},894:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-27.708cde77.png"},895:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-28.e4310d35.png"},896:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-29.ae657ceb.png"},897:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-30.708cde77.png"},898:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-31.967b70a7.png"},899:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-32.5bc65232.png"},900:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-33.357292ec.png"},901:function(s,t,a){s.exports=a.p+"assets/img/merge-two-sorted-lists-34.265a9c9b.png"}}]);