(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{1267:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"中文题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中文题目"}},[t._v("#")]),t._v(" 中文题目")]),t._v(" "),n("div",[n("p",[t._v("将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 ")]),t._v(" "),n("p",[n("strong",[t._v("示例：")])]),t._v(" "),n("pre",[n("strong",[t._v("输入：")]),t._v("1->2->4, 1->3->4\n"),n("strong",[t._v("输出：")]),t._v("1->1->2->3->4->4\n")])]),t._v(" "),n("h2",{attrs:{id:"通过代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过代码"}},[t._v("#")]),t._v(" 通过代码")]),t._v(" "),n("RecoDemo",[n("template",{slot:"code-Java-1"},[n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                head"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                head"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br")])])]),t._v(" "),n("template",{slot:"code-Java-2"},[n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("l2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    l1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    l2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    listNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("listNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br")])])])],2),t._v(" "),n("h2",{attrs:{id:"官方题解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#官方题解"}},[t._v("#")]),t._v(" 官方题解")]),t._v(" "),n("h4",{attrs:{id:"方法-1：递归"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法-1：递归"}},[t._v("#")]),t._v(" 方法 1：递归")]),t._v(" "),n("p",[n("strong",[t._v("想法")])]),t._v(" "),n("p",[t._v("我们可以如下递归地定义在两个链表里的 "),n("code",[t._v("merge")]),t._v(" 操作（忽略边界情况，比如空链表等）：")]),t._v(" "),n("p",{staticClass:"katex-block"},[n("span",{staticClass:"katex-display"},[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mo",{attrs:{fence:"true"}},[t._v("{")]),n("mtable",{attrs:{rowspacing:"0.15999999999999992em",columnalign:"left left",columnspacing:"1em"}},[n("mtr",[n("mtd",[n("mstyle",{attrs:{scriptlevel:"0",displaystyle:"false"}},[n("mrow",[n("mi",[t._v("l")]),n("mi",[t._v("i")]),n("mi",[t._v("s")]),n("mi",[t._v("t")]),n("mn",[t._v("1")]),n("mo",{attrs:{stretchy:"false"}},[t._v("[")]),n("mn",[t._v("0")]),n("mo",{attrs:{stretchy:"false"}},[t._v("]")]),n("mo",[t._v("+")]),n("mi",[t._v("m")]),n("mi",[t._v("e")]),n("mi",[t._v("r")]),n("mi",[t._v("g")]),n("mi",[t._v("e")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mi",[t._v("l")]),n("mi",[t._v("i")]),n("mi",[t._v("s")]),n("mi",[t._v("t")]),n("mn",[t._v("1")]),n("mo",{attrs:{stretchy:"false"}},[t._v("[")]),n("mn",[t._v("1")]),n("mo",[t._v(":")]),n("mo",{attrs:{stretchy:"false"}},[t._v("]")]),n("mo",{attrs:{separator:"true"}},[t._v(",")]),n("mi",[t._v("l")]),n("mi",[t._v("i")]),n("mi",[t._v("s")]),n("mi",[t._v("t")]),n("mn",[t._v("2")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1)],1)],1),n("mtd",[n("mstyle",{attrs:{scriptlevel:"0",displaystyle:"false"}},[n("mrow",[n("mi",[t._v("l")]),n("mi",[t._v("i")]),n("mi",[t._v("s")]),n("mi",[t._v("t")]),n("mn",[t._v("1")]),n("mo",{attrs:{stretchy:"false"}},[t._v("[")]),n("mn",[t._v("0")]),n("mo",{attrs:{stretchy:"false"}},[t._v("]")]),n("mo",[t._v("<")]),n("mi",[t._v("l")]),n("mi",[t._v("i")]),n("mi",[t._v("s")]),n("mi",[t._v("t")]),n("mn",[t._v("2")]),n("mo",{attrs:{stretchy:"false"}},[t._v("[")]),n("mn",[t._v("0")]),n("mo",{attrs:{stretchy:"false"}},[t._v("]")])],1)],1)],1)],1),n("mtr",[n("mtd",[n("mstyle",{attrs:{scriptlevel:"0",displaystyle:"false"}},[n("mrow",[n("mi",[t._v("l")]),n("mi",[t._v("i")]),n("mi",[t._v("s")]),n("mi",[t._v("t")]),n("mn",[t._v("2")]),n("mo",{attrs:{stretchy:"false"}},[t._v("[")]),n("mn",[t._v("0")]),n("mo",{attrs:{stretchy:"false"}},[t._v("]")]),n("mo",[t._v("+")]),n("mi",[t._v("m")]),n("mi",[t._v("e")]),n("mi",[t._v("r")]),n("mi",[t._v("g")]),n("mi",[t._v("e")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mi",[t._v("l")]),n("mi",[t._v("i")]),n("mi",[t._v("s")]),n("mi",[t._v("t")]),n("mn",[t._v("1")]),n("mo",{attrs:{separator:"true"}},[t._v(",")]),n("mi",[t._v("l")]),n("mi",[t._v("i")]),n("mi",[t._v("s")]),n("mi",[t._v("t")]),n("mn",[t._v("2")]),n("mo",{attrs:{stretchy:"false"}},[t._v("[")]),n("mn",[t._v("1")]),n("mo",[t._v(":")]),n("mo",{attrs:{stretchy:"false"}},[t._v("]")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1)],1)],1),n("mtd",[n("mstyle",{attrs:{scriptlevel:"0",displaystyle:"false"}},[n("mrow",[n("mi",[t._v("o")]),n("mi",[t._v("t")]),n("mi",[t._v("h")]),n("mi",[t._v("e")]),n("mi",[t._v("r")]),n("mi",[t._v("w")]),n("mi",[t._v("i")]),n("mi",[t._v("s")]),n("mi",[t._v("e")])],1)],1)],1)],1)],1)],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\left\\{\n\\begin{array}{ll}\n      list1[0] + merge(list1[1:], list2) & list1[0] < list2[0] \\\\\n      list2[0] + merge(list1, list2[1:]) & otherwise\n\\end{array}\n\\right.\n")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"2.40003em","vertical-align":"-0.95003em"}}),n("span",{staticClass:"minner"},[n("span",{staticClass:"mopen delimcenter",staticStyle:{top:"0em"}},[n("span",{staticClass:"delimsizing size3"},[t._v("{")])]),n("span",{staticClass:"mord"},[n("span",{staticClass:"mtable"},[n("span",{staticClass:"arraycolsep",staticStyle:{width:"0.5em"}}),n("span",{staticClass:"col-align-l"},[n("span",{staticClass:"vlist-t vlist-t2"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"1.45em"}},[n("span",{staticStyle:{top:"-3.61em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),n("span",{staticClass:"mord mathdefault"},[t._v("i")]),n("span",{staticClass:"mord mathdefault"},[t._v("s")]),n("span",{staticClass:"mord mathdefault"},[t._v("t")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mopen"},[t._v("[")]),n("span",{staticClass:"mord"},[t._v("0")]),n("span",{staticClass:"mclose"},[t._v("]")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mord mathdefault"},[t._v("m")]),n("span",{staticClass:"mord mathdefault"},[t._v("e")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03588em"}},[t._v("g")]),n("span",{staticClass:"mord mathdefault"},[t._v("e")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),n("span",{staticClass:"mord mathdefault"},[t._v("i")]),n("span",{staticClass:"mord mathdefault"},[t._v("s")]),n("span",{staticClass:"mord mathdefault"},[t._v("t")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mopen"},[t._v("[")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v(":")]),n("span",{staticClass:"mclose"},[t._v("]")]),n("span",{staticClass:"mpunct"},[t._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),n("span",{staticClass:"mord mathdefault"},[t._v("i")]),n("span",{staticClass:"mord mathdefault"},[t._v("s")]),n("span",{staticClass:"mord mathdefault"},[t._v("t")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mclose"},[t._v(")")])])]),n("span",{staticStyle:{top:"-2.4099999999999997em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),n("span",{staticClass:"mord mathdefault"},[t._v("i")]),n("span",{staticClass:"mord mathdefault"},[t._v("s")]),n("span",{staticClass:"mord mathdefault"},[t._v("t")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mopen"},[t._v("[")]),n("span",{staticClass:"mord"},[t._v("0")]),n("span",{staticClass:"mclose"},[t._v("]")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mord mathdefault"},[t._v("m")]),n("span",{staticClass:"mord mathdefault"},[t._v("e")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03588em"}},[t._v("g")]),n("span",{staticClass:"mord mathdefault"},[t._v("e")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),n("span",{staticClass:"mord mathdefault"},[t._v("i")]),n("span",{staticClass:"mord mathdefault"},[t._v("s")]),n("span",{staticClass:"mord mathdefault"},[t._v("t")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mpunct"},[t._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),n("span",{staticClass:"mord mathdefault"},[t._v("i")]),n("span",{staticClass:"mord mathdefault"},[t._v("s")]),n("span",{staticClass:"mord mathdefault"},[t._v("t")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mopen"},[t._v("[")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v(":")]),n("span",{staticClass:"mclose"},[t._v("]")]),n("span",{staticClass:"mclose"},[t._v(")")])])])]),n("span",{staticClass:"vlist-s"},[t._v("​")])]),n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.9500000000000004em"}},[n("span")])])])]),n("span",{staticClass:"arraycolsep",staticStyle:{width:"0.5em"}}),n("span",{staticClass:"arraycolsep",staticStyle:{width:"0.5em"}}),n("span",{staticClass:"col-align-l"},[n("span",{staticClass:"vlist-t vlist-t2"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"1.45em"}},[n("span",{staticStyle:{top:"-3.61em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),n("span",{staticClass:"mord mathdefault"},[t._v("i")]),n("span",{staticClass:"mord mathdefault"},[t._v("s")]),n("span",{staticClass:"mord mathdefault"},[t._v("t")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mopen"},[t._v("[")]),n("span",{staticClass:"mord"},[t._v("0")]),n("span",{staticClass:"mclose"},[t._v("]")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("<")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),n("span",{staticClass:"mord mathdefault"},[t._v("i")]),n("span",{staticClass:"mord mathdefault"},[t._v("s")]),n("span",{staticClass:"mord mathdefault"},[t._v("t")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mopen"},[t._v("[")]),n("span",{staticClass:"mord"},[t._v("0")]),n("span",{staticClass:"mclose"},[t._v("]")])])]),n("span",{staticStyle:{top:"-2.4099999999999997em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord mathdefault"},[t._v("o")]),n("span",{staticClass:"mord mathdefault"},[t._v("t")]),n("span",{staticClass:"mord mathdefault"},[t._v("h")]),n("span",{staticClass:"mord mathdefault"},[t._v("e")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02691em"}},[t._v("w")]),n("span",{staticClass:"mord mathdefault"},[t._v("i")]),n("span",{staticClass:"mord mathdefault"},[t._v("s")]),n("span",{staticClass:"mord mathdefault"},[t._v("e")])])])]),n("span",{staticClass:"vlist-s"},[t._v("​")])]),n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.9500000000000004em"}},[n("span")])])])]),n("span",{staticClass:"arraycolsep",staticStyle:{width:"0.5em"}})])]),n("span",{staticClass:"mclose nulldelimiter"})])])])])])]),t._v(" "),n("p",[t._v("也就是说，两个链表头部较小的一个与剩下元素的 "),n("code",[t._v("merge")]),t._v(" 操作结果合并。")]),t._v(" "),n("p",[n("strong",[t._v("算法")]),t._v("\n我们直接将以上递归过程建模，首先考虑边界情况。\n特殊的，如果 "),n("code",[t._v("l1")]),t._v(" 或者 "),n("code",[t._v("l2")]),t._v(" 一开始就是 "),n("code",[t._v("null")]),t._v(" ，那么没有任何操作需要合并，所以我们只需要返回非空链表。否则，我们要判断 "),n("code",[t._v("l1")]),t._v(" 和 "),n("code",[t._v("l2")]),t._v(" 哪一个的头元素更小，然后递归地决定下一个添加到结果里的值。如果两个链表都是空的，那么过程终止，所以递归过程最终一定会终止。")]),t._v(" "),n("div",{staticClass:"language-Java [] line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br")])]),n("div",{staticClass:"language-Python [] line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" l1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" l2\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" l2 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" l1\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mergeTwoLists"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" l1\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mergeTwoLists"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" l2\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br")])]),n("p",[n("strong",[t._v("复杂度分析")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("时间复杂度："),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[t._v("O")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mi",[t._v("n")]),n("mo",[t._v("+")]),n("mi",[t._v("m")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n + m)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathdefault"},[t._v("n")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault"},[t._v("m")]),n("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("。 因为每次调用递归都会去掉 "),n("code",[t._v("l1")]),t._v(" 或者 "),n("code",[t._v("l2")]),t._v(" 的头元素（直到至少有一个链表为空），函数 "),n("code",[t._v("mergeTwoList")]),t._v(" 中只会遍历每个元素一次。所以，时间复杂度与合并后的链表长度为线性关系。")])]),t._v(" "),n("li",[n("p",[t._v("空间复杂度："),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[t._v("O")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mi",[t._v("n")]),n("mo",[t._v("+")]),n("mi",[t._v("m")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n + m)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathdefault"},[t._v("n")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault"},[t._v("m")]),n("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("。调用 "),n("code",[t._v("mergeTwoLists")]),t._v(" 退出时 "),n("code",[t._v("l1")]),t._v(" 和 "),n("code",[t._v("l2")]),t._v(" 中每个元素都一定已经被遍历过了，所以 "),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[t._v("n")]),n("mo",[t._v("+")]),n("mi",[t._v("m")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n + m")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.66666em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord mathdefault"},[t._v("n")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),n("span",{staticClass:"mord mathdefault"},[t._v("m")])])])]),t._v(" 个栈帧会消耗 "),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[t._v("O")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mi",[t._v("n")]),n("mo",[t._v("+")]),n("mi",[t._v("m")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n + m)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathdefault"},[t._v("n")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault"},[t._v("m")]),n("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(" 的空间。")])])]),t._v(" "),n("h4",{attrs:{id:"方法-2：迭代"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法-2：迭代"}},[t._v("#")]),t._v(" 方法 2：迭代")]),t._v(" "),n("p",[n("strong",[t._v("想法")])]),t._v(" "),n("p",[t._v("我们可以用迭代的方法来实现上述算法。我们假设 "),n("code",[t._v("l1")]),t._v(" 元素严格比 "),n("code",[t._v("l2")]),t._v("元素少，我们可以将 "),n("code",[t._v("l2")]),t._v(" 中的元素逐一插入 "),n("code",[t._v("l1")]),t._v(" 中正确的位置。")]),t._v(" "),n("p",[n("strong",[t._v("算法")])]),t._v(" "),n("p",[t._v('首先，我们设定一个哨兵节点 "'),n("code",[t._v("prehead")]),t._v('" ，这可以在最后让我们比较容易地返回合并后的链表。我们维护一个 '),n("code",[t._v("prev")]),t._v(" 指针，我们需要做的是调整它的 "),n("code",[t._v("next")]),t._v(" 指针。然后，我们重复以下过程，直到 "),n("code",[t._v("l1")]),t._v(" 或者 "),n("code",[t._v("l2")]),t._v(" 指向了 "),n("code",[t._v("null")]),t._v(" ：如果 "),n("code",[t._v("l1")]),t._v(" 当前位置的值小于等于 "),n("code",[t._v("l2")]),t._v(" ，我们就把 "),n("code",[t._v("l1")]),t._v(" 的值接在 "),n("code",[t._v("prev")]),t._v(" 节点的后面同时将 "),n("code",[t._v("l1")]),t._v(" 指针往后移一个。否则，我们对 "),n("code",[t._v("l2")]),t._v(" 做同样的操作。不管我们将哪一个元素接在了后面，我们都把 "),n("code",[t._v("prev")]),t._v(" 向后移一个元素。")]),t._v(" "),n("p",[t._v("在循环终止的时候， "),n("code",[t._v("l1")]),t._v(" 和 "),n("code",[t._v("l2")]),t._v(" 至多有一个是非空的。由于输入的两个链表都是有序的，所以不管哪个链表是非空的，它包含的所有元素都比前面已经合并链表中的所有元素都要大。这意味着我们只需要简单地将非空链表接在合并链表的后面，并返回合并链表。")]),t._v(" "),n("p",[t._v("<"),n("img",{attrs:{src:a(877),alt:"image.png"}}),t._v(", "),n("img",{attrs:{src:a(878),alt:"image.png"}}),t._v(", "),n("img",{attrs:{src:a(879),alt:"image.png"}}),t._v(", "),n("img",{attrs:{src:a(880),alt:"image.png"}}),t._v(", "),n("img",{attrs:{src:a(881),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(882),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(883),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(884),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(885),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(886),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(887),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(888),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(889),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(890),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(891),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(892),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(893),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(894),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(895),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(896),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(897),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(898),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(899),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(900),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(901),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(902),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(903),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(904),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(905),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(906),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(907),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(908),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(909),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(910),alt:"image.png"}}),t._v(","),n("img",{attrs:{src:a(911),alt:"image.png"}}),t._v(">")]),t._v(" "),n("div",{staticClass:"language-Java [] line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// maintain an unchanging reference to node ahead of the return node.")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" prehead "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prehead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// exactly one of l1 and l2 can be non-null at this point, so connect")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the non-null list to the end of the merged list.")]),t._v("\n        prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" prehead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br")])]),n("div",{staticClass:"language-Python [] line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# maintain an unchanging reference to node ahead of the return node.")]),t._v("\n        prehead "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ListNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prehead\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" l1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1\n                l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2\n                l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("            \n            prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# exactly one of l1 and l2 can be non-null at this point, so connect")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the non-null list to the end of the merged list.")]),t._v("\n        prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" l1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" l2\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" prehead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br")])]),n("p",[n("strong",[t._v("复杂度分析")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("时间复杂度："),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[t._v("O")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mi",[t._v("n")]),n("mo",[t._v("+")]),n("mi",[t._v("m")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n + m)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathdefault"},[t._v("n")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault"},[t._v("m")]),n("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(" 。因为每次循环迭代中，"),n("code",[t._v("l1")]),t._v(" 和 "),n("code",[t._v("l2")]),t._v(" 只有一个元素会被放进合并链表中， "),n("code",[t._v("while")]),t._v(" 循环的次数等于两个链表的总长度。所有其他工作都是常数级别的，所以总的时间复杂度是线性的。")])]),t._v(" "),n("li",[n("p",[t._v("空间复杂度："),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[t._v("O")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mn",[t._v("1")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(1)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(" 。迭代的过程只会产生几个指针，所以它所需要的空间是常数级别的。")])])]),t._v(" "),n("h2",{attrs:{id:"提交历史"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#提交历史"}},[t._v("#")]),t._v(" 提交历史")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("提交时间")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("提交结果")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("执行时间")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("战胜比例")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("内存消耗")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("语言")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("2018-04-26 23:29:11")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[n("a",{attrs:{href:"https://leetcode-cn.com//submissions/detail/1731093/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Accepted"),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("13 ms")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("85.04%")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("N/A")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("java")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("2018-04-26 23:25:34")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[n("a",{attrs:{href:"https://leetcode-cn.com//submissions/detail/1730958/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Accepted"),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("37 ms")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("85.04%")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("N/A")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("java")])])])]),t._v(" "),n("h2",{attrs:{id:"统计信息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#统计信息"}},[t._v("#")]),t._v(" 统计信息")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("通过次数")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("提交次数")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("AC比率")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("167609")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("283430")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("59.1%")])])])]),t._v(" "),n("h2",{attrs:{id:"相似题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相似题目"}},[t._v("#")]),t._v(" 相似题目")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("题目")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("难度")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[n("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("合并K个排序链表"),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("困难")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[n("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("合并两个有序数组"),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("简单")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[n("a",{attrs:{href:"https://leetcode-cn.com/problems/sort-list/",target:"_blank",rel:"noopener noreferrer"}},[t._v("排序链表"),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("中等")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[n("a",{attrs:{href:"https://leetcode-cn.com/problems/shortest-word-distance-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("最短单词距离 II"),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("中等")])])])])],1)}),[],!1,null,null,null);s.default=e.exports},877:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-0.ea36ed60.png"},878:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-1.b3fabc00.png"},879:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-2.63543a66.png"},880:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-3.29e3fe38.png"},881:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-4.5a8f674d.png"},882:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-5.6ef93a1b.png"},883:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-6.eb485083.png"},884:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-7.97aedee0.png"},885:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-8.c649abdb.png"},886:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-9.e61b4ca3.png"},887:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-10.2e5aa7a5.png"},888:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-11.a7645e2b.png"},889:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-12.d791ac5c.png"},890:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-13.686348e2.png"},891:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-14.4eb7c865.png"},892:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-15.3622f55e.png"},893:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-16.452ab805.png"},894:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-17.c85ee602.png"},895:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-18.9ae880af.png"},896:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-19.bb7ef62b.png"},897:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-20.c85ee602.png"},898:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-21.f92b41fb.png"},899:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-22.f3a99133.png"},900:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-23.b951fcf9.png"},901:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-24.2196a938.png"},902:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-25.86574704.png"},903:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-26.00b8821a.png"},904:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-27.708cde77.png"},905:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-28.e4310d35.png"},906:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-29.ae657ceb.png"},907:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-30.708cde77.png"},908:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-31.967b70a7.png"},909:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-32.5bc65232.png"},910:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-33.357292ec.png"},911:function(t,s,a){t.exports=a.p+"assets/img/merge-two-sorted-lists-34.265a9c9b.png"}}]);